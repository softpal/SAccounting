//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Accounting.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AccountingEntities : DbContext
    {
        public AccountingEntities()
            : base("name=AccountingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CustomersAddress> CustomersAddresses { get; set; }
        public DbSet<CustomerTaxDetail> CustomerTaxDetails { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<EmployeeBankDetail> EmployeeBankDetails { get; set; }
        public DbSet<EmployeeFamilyDetail> EmployeeFamilyDetails { get; set; }
        public DbSet<EmployeeLeaveBillingDetail> EmployeeLeaveBillingDetails { get; set; }
        public DbSet<EmployeeLeaf> EmployeeLeaves { get; set; }
        public DbSet<EmployeePaymentType> EmployeePaymentTypes { get; set; }
        public DbSet<EmployeePayroll> EmployeePayrolls { get; set; }
        public DbSet<EmployeesTimesheet> EmployeesTimesheets { get; set; }
        public DbSet<UserCustomer> UserCustomers { get; set; }
        public DbSet<UserEmployee> UserEmployees { get; set; }
        public DbSet<UserVendor> UserVendors { get; set; }
        public DbSet<VendorsAddress> VendorsAddresses { get; set; }
        public DbSet<VendorTaxDetail> VendorTaxDetails { get; set; }
        public DbSet<ApplicationParameter> ApplicationParameters { get; set; }
        public DbSet<Mst_AccountSubTypes> Mst_AccountSubTypes { get; set; }
        public DbSet<Mst_AccountTypes> Mst_AccountTypes { get; set; }
        public DbSet<Mst_AccountUserTypes> Mst_AccountUserTypes { get; set; }
        public DbSet<Mst_AddressType> Mst_AddressType { get; set; }
        public DbSet<Mst_AssetDisposition> Mst_AssetDisposition { get; set; }
        public DbSet<Mst_AssetType> Mst_AssetType { get; set; }
        public DbSet<Mst_BankAccountTypes> Mst_BankAccountTypes { get; set; }
        public DbSet<Mst_BusinessStatus> Mst_BusinessStatus { get; set; }
        public DbSet<Mst_BusinessType> Mst_BusinessType { get; set; }
        public DbSet<Mst_Cities> Mst_Cities { get; set; }
        public DbSet<Mst_Counties> Mst_Counties { get; set; }
        public DbSet<Mst_Countries> Mst_Countries { get; set; }
        public DbSet<Mst_CreditPeriodTypes> Mst_CreditPeriodTypes { get; set; }
        public DbSet<Mst_CustomersRename> Mst_CustomersRename { get; set; }
        public DbSet<Mst_GreetingsList> Mst_GreetingsList { get; set; }
        public DbSet<Mst_InvoiceDueTerm> Mst_InvoiceDueTerm { get; set; }
        public DbSet<Mst_Invoicestatus> Mst_Invoicestatus { get; set; }
        public DbSet<Mst_ItemTypes> Mst_ItemTypes { get; set; }
        public DbSet<Mst_PaymentStatus> Mst_PaymentStatus { get; set; }
        public DbSet<Mst_PaymentTypes> Mst_PaymentTypes { get; set; }
        public DbSet<Mst_PreferenceFields> Mst_PreferenceFields { get; set; }
        public DbSet<Mst_PreferenceValues> Mst_PreferenceValues { get; set; }
        public DbSet<Mst_Screens> Mst_Screens { get; set; }
        public DbSet<Mst_SignupPricing> Mst_SignupPricing { get; set; }
        public DbSet<Mst_SignupRenewal> Mst_SignupRenewal { get; set; }
        public DbSet<Mst_States> Mst_States { get; set; }
        public DbSet<Mst_TaxTypes> Mst_TaxTypes { get; set; }
        public DbSet<Mst_UserRoles> Mst_UserRoles { get; set; }
        public DbSet<Mst_UserType> Mst_UserType { get; set; }
        public DbSet<Mst_VendorType> Mst_VendorType { get; set; }
        public DbSet<Serial> Serials { get; set; }
        public DbSet<BusinessBranch> BusinessBranches { get; set; }
        public DbSet<BusinessRegistration> BusinessRegistrations { get; set; }
        public DbSet<BusinessStatu> BusinessStatus { get; set; }
        public DbSet<BusinessUser> BusinessUsers { get; set; }
        public DbSet<IPBlocker> IPBlockers { get; set; }
        public DbSet<UserBankAccount> UserBankAccounts { get; set; }
        public DbSet<UserLoginDetail> UserLoginDetails { get; set; }
        public DbSet<UserPaymentDetail> UserPaymentDetails { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Asset> Assets { get; set; }
        public DbSet<EmployeeAsset> EmployeeAssets { get; set; }
        public DbSet<Estimate> Estimates { get; set; }
        public DbSet<EstimatesDetail> EstimatesDetails { get; set; }
        public DbSet<Expens> Expenses { get; set; }
        public DbSet<Payment> Payments { get; set; }
        public DbSet<PurchaseInvoice> PurchaseInvoices { get; set; }
        public DbSet<PurchaseInvoiceDetail> PurchaseInvoiceDetails { get; set; }
        public DbSet<PurchaseInvoicePayment> PurchaseInvoicePayments { get; set; }
        public DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public DbSet<Receipt> Receipts { get; set; }
        public DbSet<Rpt_Transactions> Rpt_Transactions { get; set; }
        public DbSet<SalesInvoice> SalesInvoices { get; set; }
        public DbSet<SalesInvoiceDetail> SalesInvoiceDetails { get; set; }
        public DbSet<SalesReceipt> SalesReceipts { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<TransactionType> TransactionTypes { get; set; }
        public DbSet<Journal> Journals { get; set; }
        public DbSet<UMst_AssetType> UMst_AssetType { get; set; }
        public DbSet<UMst_BusinessItems> UMst_BusinessItems { get; set; }
        public DbSet<UMst_BusinessPreferences> UMst_BusinessPreferences { get; set; }
        public DbSet<UMst_TaxDetails> UMst_TaxDetails { get; set; }
        public DbSet<UMst_UserAccounts> UMst_UserAccounts { get; set; }
        public DbSet<UMst_UserCustomFields> UMst_UserCustomFields { get; set; }
        public DbSet<UMst_UserCustomizeFields> UMst_UserCustomizeFields { get; set; }
        public DbSet<UMst_UserGreetingEmails> UMst_UserGreetingEmails { get; set; }
        public DbSet<UMst_UserParentAccounts> UMst_UserParentAccounts { get; set; }
    
        [EdmFunction("AccountingEntities", "fn_GetChildAccounts_Tmp")]
        public virtual IQueryable<fn_GetChildAccounts_Tmp_Result> fn_GetChildAccounts_Tmp(Nullable<int> businessId, Nullable<long> accountId, Nullable<short> report)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var reportParameter = report.HasValue ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetChildAccounts_Tmp_Result>("[AccountingEntities].[fn_GetChildAccounts_Tmp](@BusinessId, @AccountId, @Report)", businessIdParameter, accountIdParameter, reportParameter);
        }
    
        public virtual ObjectResult<LedgerAccounts_Result> LedgerAccounts(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LedgerAccounts_Result>("LedgerAccounts", businessIdParameter);
        }
    
        public virtual int Master_Accounts_InsertScript()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Master_Accounts_InsertScript");
        }
    
        public virtual ObjectResult<Get_ApplicationParameters_Result> Get_ApplicationParameters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_ApplicationParameters_Result>("Get_ApplicationParameters");
        }
    
        public virtual ObjectResult<Get_AssetDispositionTypes_Result> Get_AssetDispositionTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_AssetDispositionTypes_Result>("Get_AssetDispositionTypes");
        }
    
        public virtual ObjectResult<Get_BankAccountTypes_Result> Get_BankAccountTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BankAccountTypes_Result>("Get_BankAccountTypes");
        }
    
        public virtual ObjectResult<Get_BusinessTypes_Result> Get_BusinessTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BusinessTypes_Result>("Get_BusinessTypes");
        }
    
        public virtual ObjectResult<Get_InstrumentTypes_Result> Get_InstrumentTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_InstrumentTypes_Result>("Get_InstrumentTypes");
        }
    
        public virtual ObjectResult<Get_InvoicesStatus_Result> Get_InvoicesStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_InvoicesStatus_Result>("Get_InvoicesStatus");
        }
    
        public virtual ObjectResult<Get_MasterAddress_Result> Get_MasterAddress(Nullable<int> countyData)
        {
            var countyDataParameter = countyData.HasValue ?
                new ObjectParameter("CountyData", countyData) :
                new ObjectParameter("CountyData", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_MasterAddress_Result>("Get_MasterAddress", countyDataParameter);
        }
    
        public virtual ObjectResult<Get_MasterCustomersRename_Result> Get_MasterCustomersRename()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_MasterCustomersRename_Result>("Get_MasterCustomersRename");
        }
    
        public virtual ObjectResult<Get_MasterGreetingList_Result> Get_MasterGreetingList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_MasterGreetingList_Result>("Get_MasterGreetingList");
        }
    
        public virtual ObjectResult<Get_MasterPreferences_Result> Get_MasterPreferences()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_MasterPreferences_Result>("Get_MasterPreferences");
        }
    
        public virtual ObjectResult<Get_PaymentStatusTypes_Result> Get_PaymentStatusTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_PaymentStatusTypes_Result>("Get_PaymentStatusTypes");
        }
    
        public virtual ObjectResult<Get_PaymentTypes_Result> Get_PaymentTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_PaymentTypes_Result>("Get_PaymentTypes");
        }
    
        public virtual int BankAccounts(Nullable<int> businessID, Nullable<int> userId, Nullable<short> userTypeId, Nullable<long> bankAccountsId, Nullable<short> bankAccountTypeId, string bankName, string accountNum, Nullable<decimal> openingBalance, string accountHolder1Name, string accountHolder2Name, string accountHolder3Name, string swiftCode, string rountingNum, string address, string phone, string fax)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(short));
    
            var bankAccountsIdParameter = bankAccountsId.HasValue ?
                new ObjectParameter("BankAccountsId", bankAccountsId) :
                new ObjectParameter("BankAccountsId", typeof(long));
    
            var bankAccountTypeIdParameter = bankAccountTypeId.HasValue ?
                new ObjectParameter("BankAccountTypeId", bankAccountTypeId) :
                new ObjectParameter("BankAccountTypeId", typeof(short));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("OpeningBalance", openingBalance) :
                new ObjectParameter("OpeningBalance", typeof(decimal));
    
            var accountHolder1NameParameter = accountHolder1Name != null ?
                new ObjectParameter("AccountHolder1Name", accountHolder1Name) :
                new ObjectParameter("AccountHolder1Name", typeof(string));
    
            var accountHolder2NameParameter = accountHolder2Name != null ?
                new ObjectParameter("AccountHolder2Name", accountHolder2Name) :
                new ObjectParameter("AccountHolder2Name", typeof(string));
    
            var accountHolder3NameParameter = accountHolder3Name != null ?
                new ObjectParameter("AccountHolder3Name", accountHolder3Name) :
                new ObjectParameter("AccountHolder3Name", typeof(string));
    
            var swiftCodeParameter = swiftCode != null ?
                new ObjectParameter("SwiftCode", swiftCode) :
                new ObjectParameter("SwiftCode", typeof(string));
    
            var rountingNumParameter = rountingNum != null ?
                new ObjectParameter("RountingNum", rountingNum) :
                new ObjectParameter("RountingNum", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BankAccounts", businessIDParameter, userIdParameter, userTypeIdParameter, bankAccountsIdParameter, bankAccountTypeIdParameter, bankNameParameter, accountNumParameter, openingBalanceParameter, accountHolder1NameParameter, accountHolder2NameParameter, accountHolder3NameParameter, swiftCodeParameter, rountingNumParameter, addressParameter, phoneParameter, faxParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Business_SuperUser_Registration(string user_firstname, string user_lastname, string user_email, string user_pwd, string businessName, string businesaddress, Nullable<int> cityId, Nullable<int> stateId, Nullable<short> countryId, string businessPhone, string businessFax, Nullable<int> licencesRequired, Nullable<short> signupPricingId, Nullable<short> signupRenewalId)
        {
            var user_firstnameParameter = user_firstname != null ?
                new ObjectParameter("User_firstname", user_firstname) :
                new ObjectParameter("User_firstname", typeof(string));
    
            var user_lastnameParameter = user_lastname != null ?
                new ObjectParameter("User_lastname", user_lastname) :
                new ObjectParameter("User_lastname", typeof(string));
    
            var user_emailParameter = user_email != null ?
                new ObjectParameter("User_email", user_email) :
                new ObjectParameter("User_email", typeof(string));
    
            var user_pwdParameter = user_pwd != null ?
                new ObjectParameter("User_pwd", user_pwd) :
                new ObjectParameter("User_pwd", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businesaddressParameter = businesaddress != null ?
                new ObjectParameter("Businesaddress", businesaddress) :
                new ObjectParameter("Businesaddress", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(short));
    
            var businessPhoneParameter = businessPhone != null ?
                new ObjectParameter("BusinessPhone", businessPhone) :
                new ObjectParameter("BusinessPhone", typeof(string));
    
            var businessFaxParameter = businessFax != null ?
                new ObjectParameter("BusinessFax", businessFax) :
                new ObjectParameter("BusinessFax", typeof(string));
    
            var licencesRequiredParameter = licencesRequired.HasValue ?
                new ObjectParameter("LicencesRequired", licencesRequired) :
                new ObjectParameter("LicencesRequired", typeof(int));
    
            var signupPricingIdParameter = signupPricingId.HasValue ?
                new ObjectParameter("SignupPricingId", signupPricingId) :
                new ObjectParameter("SignupPricingId", typeof(short));
    
            var signupRenewalIdParameter = signupRenewalId.HasValue ?
                new ObjectParameter("SignupRenewalId", signupRenewalId) :
                new ObjectParameter("SignupRenewalId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Business_SuperUser_Registration", user_firstnameParameter, user_lastnameParameter, user_emailParameter, user_pwdParameter, businessNameParameter, businesaddressParameter, cityIdParameter, stateIdParameter, countryIdParameter, businessPhoneParameter, businessFaxParameter, licencesRequiredParameter, signupPricingIdParameter, signupRenewalIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> BUSINESS_USERNAME_EXSTNACE(string user_email)
        {
            var user_emailParameter = user_email != null ?
                new ObjectParameter("User_email", user_email) :
                new ObjectParameter("User_email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("BUSINESS_USERNAME_EXSTNACE", user_emailParameter);
        }
    
        public virtual int BusinessProducts(Nullable<int> userId, Nullable<int> businessID, Nullable<long> productsId, string productsTitle, string productsUniqueId, string productsDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var productsIdParameter = productsId.HasValue ?
                new ObjectParameter("ProductsId", productsId) :
                new ObjectParameter("ProductsId", typeof(long));
    
            var productsTitleParameter = productsTitle != null ?
                new ObjectParameter("ProductsTitle", productsTitle) :
                new ObjectParameter("ProductsTitle", typeof(string));
    
            var productsUniqueIdParameter = productsUniqueId != null ?
                new ObjectParameter("ProductsUniqueId", productsUniqueId) :
                new ObjectParameter("ProductsUniqueId", typeof(string));
    
            var productsDescParameter = productsDesc != null ?
                new ObjectParameter("ProductsDesc", productsDesc) :
                new ObjectParameter("ProductsDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BusinessProducts", userIdParameter, businessIDParameter, productsIdParameter, productsTitleParameter, productsUniqueIdParameter, productsDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int BusinessProjects(Nullable<int> userId, Nullable<int> businessID, Nullable<long> projectsId, string projectsTitle, string projectsUniqueId, string projectsDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var projectsIdParameter = projectsId.HasValue ?
                new ObjectParameter("ProjectsId", projectsId) :
                new ObjectParameter("ProjectsId", typeof(long));
    
            var projectsTitleParameter = projectsTitle != null ?
                new ObjectParameter("ProjectsTitle", projectsTitle) :
                new ObjectParameter("ProjectsTitle", typeof(string));
    
            var projectsUniqueIdParameter = projectsUniqueId != null ?
                new ObjectParameter("ProjectsUniqueId", projectsUniqueId) :
                new ObjectParameter("ProjectsUniqueId", typeof(string));
    
            var projectsDescParameter = projectsDesc != null ?
                new ObjectParameter("ProjectsDesc", projectsDesc) :
                new ObjectParameter("ProjectsDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BusinessProjects", userIdParameter, businessIDParameter, projectsIdParameter, projectsTitleParameter, projectsUniqueIdParameter, projectsDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int BusinessRegistrationVerification(Nullable<int> businessID, Nullable<int> userId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BusinessRegistrationVerification", businessIDParameter, userIdParameter);
        }
    
        public virtual int BusinessServices(Nullable<int> userId, Nullable<int> businessID, Nullable<long> servicesId, string servicesTitle, string servicesUniqueId, string servicesDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var servicesIdParameter = servicesId.HasValue ?
                new ObjectParameter("ServicesId", servicesId) :
                new ObjectParameter("ServicesId", typeof(long));
    
            var servicesTitleParameter = servicesTitle != null ?
                new ObjectParameter("ServicesTitle", servicesTitle) :
                new ObjectParameter("ServicesTitle", typeof(string));
    
            var servicesUniqueIdParameter = servicesUniqueId != null ?
                new ObjectParameter("ServicesUniqueId", servicesUniqueId) :
                new ObjectParameter("ServicesUniqueId", typeof(string));
    
            var servicesDescParameter = servicesDesc != null ?
                new ObjectParameter("ServicesDesc", servicesDesc) :
                new ObjectParameter("ServicesDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BusinessServices", userIdParameter, businessIDParameter, servicesIdParameter, servicesTitleParameter, servicesUniqueIdParameter, servicesDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int Delete_Accounts(Nullable<int> businessID, Nullable<int> userId, Nullable<long> accountId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Accounts", businessIDParameter, userIdParameter, accountIdParameter);
        }
    
        public virtual int Delete_BankAccounts(Nullable<int> businessID, Nullable<int> userId, Nullable<long> bankAccountsId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var bankAccountsIdParameter = bankAccountsId.HasValue ?
                new ObjectParameter("BankAccountsId", bankAccountsId) :
                new ObjectParameter("BankAccountsId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_BankAccounts", businessIDParameter, userIdParameter, bankAccountsIdParameter);
        }
    
        public virtual int Delete_BusinessItems(Nullable<int> userId, Nullable<int> businessID, Nullable<long> itemId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_BusinessItems", userIdParameter, businessIDParameter, itemIdParameter);
        }
    
        public virtual int Delete_BusinessProducts(Nullable<int> userId, Nullable<int> businessID, Nullable<long> productsId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var productsIdParameter = productsId.HasValue ?
                new ObjectParameter("ProductsId", productsId) :
                new ObjectParameter("ProductsId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_BusinessProducts", userIdParameter, businessIDParameter, productsIdParameter);
        }
    
        public virtual int Delete_BusinessProjects(Nullable<int> userId, Nullable<int> businessID, Nullable<long> projectsId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var projectsIdParameter = projectsId.HasValue ?
                new ObjectParameter("ProjectsId", projectsId) :
                new ObjectParameter("ProjectsId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_BusinessProjects", userIdParameter, businessIDParameter, projectsIdParameter);
        }
    
        public virtual int Delete_BusinessServices(Nullable<int> userId, Nullable<int> businessID, Nullable<long> servicesId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var servicesIdParameter = servicesId.HasValue ?
                new ObjectParameter("ServicesId", servicesId) :
                new ObjectParameter("ServicesId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_BusinessServices", userIdParameter, businessIDParameter, servicesIdParameter);
        }
    
        public virtual ObjectResult<Get_BankAccounts_Result> Get_BankAccounts(Nullable<int> businessID, Nullable<int> userId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BankAccounts_Result>("Get_BankAccounts", businessIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Get_BankAccountTypes1_Result> Get_BankAccountTypes1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BankAccountTypes1_Result>("Get_BankAccountTypes1");
        }
    
        public virtual ObjectResult<Get_BusinessDetails_Result> Get_BusinessDetails(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BusinessDetails_Result>("Get_BusinessDetails", businessIdParameter);
        }
    
        public virtual ObjectResult<Get_BusinessItems_Result> Get_BusinessItems(Nullable<int> businessID, Nullable<int> userId, Nullable<short> itemTypeId, Nullable<long> itemId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(short));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BusinessItems_Result>("Get_BusinessItems", businessIDParameter, userIdParameter, itemTypeIdParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<Get_BusinessPreferences_Result> Get_BusinessPreferences(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BusinessPreferences_Result>("Get_BusinessPreferences", businessIdParameter);
        }
    
        public virtual int Get_BusinessProducts(Nullable<int> businessID, Nullable<int> userId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_BusinessProducts", businessIDParameter, userIdParameter);
        }
    
        public virtual int Get_BusinessProjects(Nullable<int> businessID, Nullable<int> userId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_BusinessProjects", businessIDParameter, userIdParameter);
        }
    
        public virtual int Get_BusinessServices(Nullable<int> businessID, Nullable<int> userId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_BusinessServices", businessIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Get_BusinessTaxDetails_Result> Get_BusinessTaxDetails(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BusinessTaxDetails_Result>("Get_BusinessTaxDetails", businessIdParameter);
        }
    
        public virtual ObjectResult<Get_CustomersAddress_Result> Get_CustomersAddress(Nullable<long> customerId, Nullable<int> userId, Nullable<int> businessID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CustomersAddress_Result>("Get_CustomersAddress", customerIdParameter, userIdParameter, businessIDParameter);
        }
    
        public virtual ObjectResult<Get_CustomersBank_Result> Get_CustomersBank(Nullable<long> customerId, Nullable<int> userId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CustomersBank_Result>("Get_CustomersBank", customerIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Get_CustomersDetails_Result> Get_CustomersDetails(Nullable<long> customerId, Nullable<int> userId, Nullable<int> businessID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CustomersDetails_Result>("Get_CustomersDetails", customerIdParameter, userIdParameter, businessIDParameter);
        }
    
        public virtual ObjectResult<Get_CustomersList_Result> Get_CustomersList(Nullable<int> businessID, Nullable<int> userId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CustomersList_Result>("Get_CustomersList", businessIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Get_CustomerTaxDetails_Result> Get_CustomerTaxDetails(Nullable<long> customerId, Nullable<int> userId, Nullable<int> businessID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CustomerTaxDetails_Result>("Get_CustomerTaxDetails", customerIdParameter, userIdParameter, businessIDParameter);
        }
    
        public virtual ObjectResult<Get_CustomFields_Result> Get_CustomFields(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CustomFields_Result>("Get_CustomFields", businessIdParameter);
        }
    
        public virtual ObjectResult<Get_CustomizeFields_Result> Get_CustomizeFields(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CustomizeFields_Result>("Get_CustomizeFields", businessIdParameter);
        }
    
        public virtual ObjectResult<Get_GreetingEmails_Result> Get_GreetingEmails(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_GreetingEmails_Result>("Get_GreetingEmails", businessIdParameter);
        }
    
        public virtual ObjectResult<Get_VendorsAddress_Result> Get_VendorsAddress(Nullable<long> vendorId, Nullable<int> userId, Nullable<int> businessID)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_VendorsAddress_Result>("Get_VendorsAddress", vendorIdParameter, userIdParameter, businessIDParameter);
        }
    
        public virtual ObjectResult<Get_VendorsBank_Result> Get_VendorsBank(Nullable<long> vendorId, Nullable<int> userId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_VendorsBank_Result>("Get_VendorsBank", vendorIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Get_VendorsDetails_Result> Get_VendorsDetails(Nullable<long> vendorId, Nullable<int> userId, Nullable<int> businessID)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_VendorsDetails_Result>("Get_VendorsDetails", vendorIdParameter, userIdParameter, businessIDParameter);
        }
    
        public virtual ObjectResult<Get_VendorsList_Result> Get_VendorsList(Nullable<int> businessID, Nullable<int> userId)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_VendorsList_Result>("Get_VendorsList", businessIDParameter, userIdParameter);
        }
    
        public virtual int Insert_Accounts(Nullable<int> businessID, Nullable<int> userId, string accountName, Nullable<int> parentAccountId, Nullable<int> accountNum, Nullable<bool> isDefaultAccounts, Nullable<bool> isSubCategory)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var parentAccountIdParameter = parentAccountId.HasValue ?
                new ObjectParameter("ParentAccountId", parentAccountId) :
                new ObjectParameter("ParentAccountId", typeof(int));
    
            var accountNumParameter = accountNum.HasValue ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(int));
    
            var isDefaultAccountsParameter = isDefaultAccounts.HasValue ?
                new ObjectParameter("IsDefaultAccounts", isDefaultAccounts) :
                new ObjectParameter("IsDefaultAccounts", typeof(bool));
    
            var isSubCategoryParameter = isSubCategory.HasValue ?
                new ObjectParameter("IsSubCategory", isSubCategory) :
                new ObjectParameter("IsSubCategory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Accounts", businessIDParameter, userIdParameter, accountNameParameter, parentAccountIdParameter, accountNumParameter, isDefaultAccountsParameter, isSubCategoryParameter);
        }
    
        public virtual int Insert_BankAccounts(Nullable<int> businessID, Nullable<int> userId, Nullable<short> userTypeId, Nullable<short> bankAccountTypeId, string bankName, string accountNum, Nullable<decimal> openingBalance, string accountHolder1Name, string accountHolder2Name, string accountHolder3Name, string swiftCode, string rountingNum, string address, string phone, string fax)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(short));
    
            var bankAccountTypeIdParameter = bankAccountTypeId.HasValue ?
                new ObjectParameter("BankAccountTypeId", bankAccountTypeId) :
                new ObjectParameter("BankAccountTypeId", typeof(short));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("OpeningBalance", openingBalance) :
                new ObjectParameter("OpeningBalance", typeof(decimal));
    
            var accountHolder1NameParameter = accountHolder1Name != null ?
                new ObjectParameter("AccountHolder1Name", accountHolder1Name) :
                new ObjectParameter("AccountHolder1Name", typeof(string));
    
            var accountHolder2NameParameter = accountHolder2Name != null ?
                new ObjectParameter("AccountHolder2Name", accountHolder2Name) :
                new ObjectParameter("AccountHolder2Name", typeof(string));
    
            var accountHolder3NameParameter = accountHolder3Name != null ?
                new ObjectParameter("AccountHolder3Name", accountHolder3Name) :
                new ObjectParameter("AccountHolder3Name", typeof(string));
    
            var swiftCodeParameter = swiftCode != null ?
                new ObjectParameter("SwiftCode", swiftCode) :
                new ObjectParameter("SwiftCode", typeof(string));
    
            var rountingNumParameter = rountingNum != null ?
                new ObjectParameter("RountingNum", rountingNum) :
                new ObjectParameter("RountingNum", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BankAccounts", businessIDParameter, userIdParameter, userTypeIdParameter, bankAccountTypeIdParameter, bankNameParameter, accountNumParameter, openingBalanceParameter, accountHolder1NameParameter, accountHolder2NameParameter, accountHolder3NameParameter, swiftCodeParameter, rountingNumParameter, addressParameter, phoneParameter, faxParameter);
        }
    
        public virtual int Insert_BusinessItems(Nullable<int> userId, Nullable<int> businessID, string title, string uniqueId, Nullable<long> userAccountsId, Nullable<short> itemTypeId, string desc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<bool> taxable, Nullable<bool> isPreferredPrice)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(short));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            var isPreferredPriceParameter = isPreferredPrice.HasValue ?
                new ObjectParameter("IsPreferredPrice", isPreferredPrice) :
                new ObjectParameter("IsPreferredPrice", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BusinessItems", userIdParameter, businessIDParameter, titleParameter, uniqueIdParameter, userAccountsIdParameter, itemTypeIdParameter, descParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, taxableParameter, isPreferredPriceParameter);
        }
    
        public virtual int Insert_BusinessProducts(Nullable<int> userId, Nullable<int> businessID, string productsTitle, string productsUniqueId, string productsDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var productsTitleParameter = productsTitle != null ?
                new ObjectParameter("ProductsTitle", productsTitle) :
                new ObjectParameter("ProductsTitle", typeof(string));
    
            var productsUniqueIdParameter = productsUniqueId != null ?
                new ObjectParameter("ProductsUniqueId", productsUniqueId) :
                new ObjectParameter("ProductsUniqueId", typeof(string));
    
            var productsDescParameter = productsDesc != null ?
                new ObjectParameter("ProductsDesc", productsDesc) :
                new ObjectParameter("ProductsDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BusinessProducts", userIdParameter, businessIDParameter, productsTitleParameter, productsUniqueIdParameter, productsDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int Insert_BusinessProjects(Nullable<int> userId, Nullable<int> businessID, string projectsTitle, string projectsUniqueId, string projectsDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var projectsTitleParameter = projectsTitle != null ?
                new ObjectParameter("ProjectsTitle", projectsTitle) :
                new ObjectParameter("ProjectsTitle", typeof(string));
    
            var projectsUniqueIdParameter = projectsUniqueId != null ?
                new ObjectParameter("ProjectsUniqueId", projectsUniqueId) :
                new ObjectParameter("ProjectsUniqueId", typeof(string));
    
            var projectsDescParameter = projectsDesc != null ?
                new ObjectParameter("ProjectsDesc", projectsDesc) :
                new ObjectParameter("ProjectsDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BusinessProjects", userIdParameter, businessIDParameter, projectsTitleParameter, projectsUniqueIdParameter, projectsDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int Insert_BusinessServices(Nullable<int> userId, Nullable<int> businessID, string servicesTitle, string servicesUniqueId, string servicesDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var servicesTitleParameter = servicesTitle != null ?
                new ObjectParameter("ServicesTitle", servicesTitle) :
                new ObjectParameter("ServicesTitle", typeof(string));
    
            var servicesUniqueIdParameter = servicesUniqueId != null ?
                new ObjectParameter("ServicesUniqueId", servicesUniqueId) :
                new ObjectParameter("ServicesUniqueId", typeof(string));
    
            var servicesDescParameter = servicesDesc != null ?
                new ObjectParameter("ServicesDesc", servicesDesc) :
                new ObjectParameter("ServicesDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BusinessServices", userIdParameter, businessIDParameter, servicesTitleParameter, servicesUniqueIdParameter, servicesDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int Insert_Customers(Nullable<int> businessID, Nullable<int> userId, string companyName, string customerFirstName, string title, string customerLastName, Nullable<bool> isProfitType, string bankName, string accountNum, Nullable<short> bankAccountTypeId, string rountingNum, string bankAddress, Nullable<short> creditPeriodTypeId, Nullable<decimal> creditLimit, Nullable<short> paymentTypesId, string creditCardToken, Nullable<bool> isTaxable, string federalTaxNum, Nullable<decimal> federalTaxValue, string stateTaxNum, Nullable<decimal> stateTaxValue, string cityTaxNum, Nullable<decimal> cityTaxValue, string countyTaxNum, Nullable<decimal> countyTaxValue, string email, string phone, string fax, string commStreet, Nullable<int> commCityId, Nullable<int> commStateId, Nullable<short> commCountryId, string commZip, string website, string billingStreet, Nullable<int> billingCityId, Nullable<int> billingStateId, Nullable<short> billingCountyId, Nullable<short> billingCountryId, string billingZip, string shippingStreet, Nullable<int> shippingCityId, Nullable<int> shippingStateId, Nullable<short> shippingCountryId, Nullable<short> shippingCountyId, string shippingZip)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var customerFirstNameParameter = customerFirstName != null ?
                new ObjectParameter("CustomerFirstName", customerFirstName) :
                new ObjectParameter("CustomerFirstName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var customerLastNameParameter = customerLastName != null ?
                new ObjectParameter("CustomerLastName", customerLastName) :
                new ObjectParameter("CustomerLastName", typeof(string));
    
            var isProfitTypeParameter = isProfitType.HasValue ?
                new ObjectParameter("IsProfitType", isProfitType) :
                new ObjectParameter("IsProfitType", typeof(bool));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var bankAccountTypeIdParameter = bankAccountTypeId.HasValue ?
                new ObjectParameter("BankAccountTypeId", bankAccountTypeId) :
                new ObjectParameter("BankAccountTypeId", typeof(short));
    
            var rountingNumParameter = rountingNum != null ?
                new ObjectParameter("RountingNum", rountingNum) :
                new ObjectParameter("RountingNum", typeof(string));
    
            var bankAddressParameter = bankAddress != null ?
                new ObjectParameter("BankAddress", bankAddress) :
                new ObjectParameter("BankAddress", typeof(string));
    
            var creditPeriodTypeIdParameter = creditPeriodTypeId.HasValue ?
                new ObjectParameter("CreditPeriodTypeId", creditPeriodTypeId) :
                new ObjectParameter("CreditPeriodTypeId", typeof(short));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("CreditLimit", creditLimit) :
                new ObjectParameter("CreditLimit", typeof(decimal));
    
            var paymentTypesIdParameter = paymentTypesId.HasValue ?
                new ObjectParameter("PaymentTypesId", paymentTypesId) :
                new ObjectParameter("PaymentTypesId", typeof(short));
    
            var creditCardTokenParameter = creditCardToken != null ?
                new ObjectParameter("CreditCardToken", creditCardToken) :
                new ObjectParameter("CreditCardToken", typeof(string));
    
            var isTaxableParameter = isTaxable.HasValue ?
                new ObjectParameter("IsTaxable", isTaxable) :
                new ObjectParameter("IsTaxable", typeof(bool));
    
            var federalTaxNumParameter = federalTaxNum != null ?
                new ObjectParameter("FederalTaxNum", federalTaxNum) :
                new ObjectParameter("FederalTaxNum", typeof(string));
    
            var federalTaxValueParameter = federalTaxValue.HasValue ?
                new ObjectParameter("FederalTaxValue", federalTaxValue) :
                new ObjectParameter("FederalTaxValue", typeof(decimal));
    
            var stateTaxNumParameter = stateTaxNum != null ?
                new ObjectParameter("StateTaxNum", stateTaxNum) :
                new ObjectParameter("StateTaxNum", typeof(string));
    
            var stateTaxValueParameter = stateTaxValue.HasValue ?
                new ObjectParameter("StateTaxValue", stateTaxValue) :
                new ObjectParameter("StateTaxValue", typeof(decimal));
    
            var cityTaxNumParameter = cityTaxNum != null ?
                new ObjectParameter("CityTaxNum", cityTaxNum) :
                new ObjectParameter("CityTaxNum", typeof(string));
    
            var cityTaxValueParameter = cityTaxValue.HasValue ?
                new ObjectParameter("CityTaxValue", cityTaxValue) :
                new ObjectParameter("CityTaxValue", typeof(decimal));
    
            var countyTaxNumParameter = countyTaxNum != null ?
                new ObjectParameter("CountyTaxNum", countyTaxNum) :
                new ObjectParameter("CountyTaxNum", typeof(string));
    
            var countyTaxValueParameter = countyTaxValue.HasValue ?
                new ObjectParameter("CountyTaxValue", countyTaxValue) :
                new ObjectParameter("CountyTaxValue", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commStreetParameter = commStreet != null ?
                new ObjectParameter("CommStreet", commStreet) :
                new ObjectParameter("CommStreet", typeof(string));
    
            var commCityIdParameter = commCityId.HasValue ?
                new ObjectParameter("CommCityId", commCityId) :
                new ObjectParameter("CommCityId", typeof(int));
    
            var commStateIdParameter = commStateId.HasValue ?
                new ObjectParameter("CommStateId", commStateId) :
                new ObjectParameter("CommStateId", typeof(int));
    
            var commCountryIdParameter = commCountryId.HasValue ?
                new ObjectParameter("CommCountryId", commCountryId) :
                new ObjectParameter("CommCountryId", typeof(short));
    
            var commZipParameter = commZip != null ?
                new ObjectParameter("CommZip", commZip) :
                new ObjectParameter("CommZip", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var billingStreetParameter = billingStreet != null ?
                new ObjectParameter("BillingStreet", billingStreet) :
                new ObjectParameter("BillingStreet", typeof(string));
    
            var billingCityIdParameter = billingCityId.HasValue ?
                new ObjectParameter("BillingCityId", billingCityId) :
                new ObjectParameter("BillingCityId", typeof(int));
    
            var billingStateIdParameter = billingStateId.HasValue ?
                new ObjectParameter("BillingStateId", billingStateId) :
                new ObjectParameter("BillingStateId", typeof(int));
    
            var billingCountyIdParameter = billingCountyId.HasValue ?
                new ObjectParameter("BillingCountyId", billingCountyId) :
                new ObjectParameter("BillingCountyId", typeof(short));
    
            var billingCountryIdParameter = billingCountryId.HasValue ?
                new ObjectParameter("BillingCountryId", billingCountryId) :
                new ObjectParameter("BillingCountryId", typeof(short));
    
            var billingZipParameter = billingZip != null ?
                new ObjectParameter("BillingZip", billingZip) :
                new ObjectParameter("BillingZip", typeof(string));
    
            var shippingStreetParameter = shippingStreet != null ?
                new ObjectParameter("ShippingStreet", shippingStreet) :
                new ObjectParameter("ShippingStreet", typeof(string));
    
            var shippingCityIdParameter = shippingCityId.HasValue ?
                new ObjectParameter("ShippingCityId", shippingCityId) :
                new ObjectParameter("ShippingCityId", typeof(int));
    
            var shippingStateIdParameter = shippingStateId.HasValue ?
                new ObjectParameter("ShippingStateId", shippingStateId) :
                new ObjectParameter("ShippingStateId", typeof(int));
    
            var shippingCountryIdParameter = shippingCountryId.HasValue ?
                new ObjectParameter("ShippingCountryId", shippingCountryId) :
                new ObjectParameter("ShippingCountryId", typeof(short));
    
            var shippingCountyIdParameter = shippingCountyId.HasValue ?
                new ObjectParameter("ShippingCountyId", shippingCountyId) :
                new ObjectParameter("ShippingCountyId", typeof(short));
    
            var shippingZipParameter = shippingZip != null ?
                new ObjectParameter("ShippingZip", shippingZip) :
                new ObjectParameter("ShippingZip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Customers", businessIDParameter, userIdParameter, companyNameParameter, customerFirstNameParameter, titleParameter, customerLastNameParameter, isProfitTypeParameter, bankNameParameter, accountNumParameter, bankAccountTypeIdParameter, rountingNumParameter, bankAddressParameter, creditPeriodTypeIdParameter, creditLimitParameter, paymentTypesIdParameter, creditCardTokenParameter, isTaxableParameter, federalTaxNumParameter, federalTaxValueParameter, stateTaxNumParameter, stateTaxValueParameter, cityTaxNumParameter, cityTaxValueParameter, countyTaxNumParameter, countyTaxValueParameter, emailParameter, phoneParameter, faxParameter, commStreetParameter, commCityIdParameter, commStateIdParameter, commCountryIdParameter, commZipParameter, websiteParameter, billingStreetParameter, billingCityIdParameter, billingStateIdParameter, billingCountyIdParameter, billingCountryIdParameter, billingZipParameter, shippingStreetParameter, shippingCityIdParameter, shippingStateIdParameter, shippingCountryIdParameter, shippingCountyIdParameter, shippingZipParameter);
        }
    
        public virtual int Insert_Vendors(Nullable<int> businessID, Nullable<int> userId, string companyName, string vendorFirstName, string title, string vendorLastName, Nullable<short> vendorTypeId, string bankName, string accountNum, Nullable<short> bankAccountTypeId, string rountingNum, string bankAddress, Nullable<short> paymentTypesId, string creditCardToken, Nullable<bool> isTaxable, string federalTaxNum, Nullable<decimal> federalTaxValue, string stateTaxNum, Nullable<decimal> stateTaxValue, string cityTaxNum, Nullable<decimal> cityTaxValue, string countyTaxNum, Nullable<decimal> countyTaxValue, string email, string phone, string fax, string commStreet, Nullable<int> commCityId, Nullable<int> commStateId, Nullable<short> commCountryId, string commZip, string website, string billingStreet, Nullable<int> billingCityId, Nullable<int> billingStateId, Nullable<short> billingCountryId, string billingZip, string shippingStreet, Nullable<int> shippingCityId, Nullable<int> shippingStateId, Nullable<short> shippingCountryId, string shippingZip)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var vendorFirstNameParameter = vendorFirstName != null ?
                new ObjectParameter("VendorFirstName", vendorFirstName) :
                new ObjectParameter("VendorFirstName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var vendorLastNameParameter = vendorLastName != null ?
                new ObjectParameter("VendorLastName", vendorLastName) :
                new ObjectParameter("VendorLastName", typeof(string));
    
            var vendorTypeIdParameter = vendorTypeId.HasValue ?
                new ObjectParameter("VendorTypeId", vendorTypeId) :
                new ObjectParameter("VendorTypeId", typeof(short));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var bankAccountTypeIdParameter = bankAccountTypeId.HasValue ?
                new ObjectParameter("BankAccountTypeId", bankAccountTypeId) :
                new ObjectParameter("BankAccountTypeId", typeof(short));
    
            var rountingNumParameter = rountingNum != null ?
                new ObjectParameter("RountingNum", rountingNum) :
                new ObjectParameter("RountingNum", typeof(string));
    
            var bankAddressParameter = bankAddress != null ?
                new ObjectParameter("BankAddress", bankAddress) :
                new ObjectParameter("BankAddress", typeof(string));
    
            var paymentTypesIdParameter = paymentTypesId.HasValue ?
                new ObjectParameter("PaymentTypesId", paymentTypesId) :
                new ObjectParameter("PaymentTypesId", typeof(short));
    
            var creditCardTokenParameter = creditCardToken != null ?
                new ObjectParameter("CreditCardToken", creditCardToken) :
                new ObjectParameter("CreditCardToken", typeof(string));
    
            var isTaxableParameter = isTaxable.HasValue ?
                new ObjectParameter("IsTaxable", isTaxable) :
                new ObjectParameter("IsTaxable", typeof(bool));
    
            var federalTaxNumParameter = federalTaxNum != null ?
                new ObjectParameter("FederalTaxNum", federalTaxNum) :
                new ObjectParameter("FederalTaxNum", typeof(string));
    
            var federalTaxValueParameter = federalTaxValue.HasValue ?
                new ObjectParameter("FederalTaxValue", federalTaxValue) :
                new ObjectParameter("FederalTaxValue", typeof(decimal));
    
            var stateTaxNumParameter = stateTaxNum != null ?
                new ObjectParameter("StateTaxNum", stateTaxNum) :
                new ObjectParameter("StateTaxNum", typeof(string));
    
            var stateTaxValueParameter = stateTaxValue.HasValue ?
                new ObjectParameter("StateTaxValue", stateTaxValue) :
                new ObjectParameter("StateTaxValue", typeof(decimal));
    
            var cityTaxNumParameter = cityTaxNum != null ?
                new ObjectParameter("CityTaxNum", cityTaxNum) :
                new ObjectParameter("CityTaxNum", typeof(string));
    
            var cityTaxValueParameter = cityTaxValue.HasValue ?
                new ObjectParameter("CityTaxValue", cityTaxValue) :
                new ObjectParameter("CityTaxValue", typeof(decimal));
    
            var countyTaxNumParameter = countyTaxNum != null ?
                new ObjectParameter("CountyTaxNum", countyTaxNum) :
                new ObjectParameter("CountyTaxNum", typeof(string));
    
            var countyTaxValueParameter = countyTaxValue.HasValue ?
                new ObjectParameter("CountyTaxValue", countyTaxValue) :
                new ObjectParameter("CountyTaxValue", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commStreetParameter = commStreet != null ?
                new ObjectParameter("CommStreet", commStreet) :
                new ObjectParameter("CommStreet", typeof(string));
    
            var commCityIdParameter = commCityId.HasValue ?
                new ObjectParameter("CommCityId", commCityId) :
                new ObjectParameter("CommCityId", typeof(int));
    
            var commStateIdParameter = commStateId.HasValue ?
                new ObjectParameter("CommStateId", commStateId) :
                new ObjectParameter("CommStateId", typeof(int));
    
            var commCountryIdParameter = commCountryId.HasValue ?
                new ObjectParameter("CommCountryId", commCountryId) :
                new ObjectParameter("CommCountryId", typeof(short));
    
            var commZipParameter = commZip != null ?
                new ObjectParameter("CommZip", commZip) :
                new ObjectParameter("CommZip", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var billingStreetParameter = billingStreet != null ?
                new ObjectParameter("BillingStreet", billingStreet) :
                new ObjectParameter("BillingStreet", typeof(string));
    
            var billingCityIdParameter = billingCityId.HasValue ?
                new ObjectParameter("BillingCityId", billingCityId) :
                new ObjectParameter("BillingCityId", typeof(int));
    
            var billingStateIdParameter = billingStateId.HasValue ?
                new ObjectParameter("BillingStateId", billingStateId) :
                new ObjectParameter("BillingStateId", typeof(int));
    
            var billingCountryIdParameter = billingCountryId.HasValue ?
                new ObjectParameter("BillingCountryId", billingCountryId) :
                new ObjectParameter("BillingCountryId", typeof(short));
    
            var billingZipParameter = billingZip != null ?
                new ObjectParameter("BillingZip", billingZip) :
                new ObjectParameter("BillingZip", typeof(string));
    
            var shippingStreetParameter = shippingStreet != null ?
                new ObjectParameter("ShippingStreet", shippingStreet) :
                new ObjectParameter("ShippingStreet", typeof(string));
    
            var shippingCityIdParameter = shippingCityId.HasValue ?
                new ObjectParameter("ShippingCityId", shippingCityId) :
                new ObjectParameter("ShippingCityId", typeof(int));
    
            var shippingStateIdParameter = shippingStateId.HasValue ?
                new ObjectParameter("ShippingStateId", shippingStateId) :
                new ObjectParameter("ShippingStateId", typeof(int));
    
            var shippingCountryIdParameter = shippingCountryId.HasValue ?
                new ObjectParameter("ShippingCountryId", shippingCountryId) :
                new ObjectParameter("ShippingCountryId", typeof(short));
    
            var shippingZipParameter = shippingZip != null ?
                new ObjectParameter("ShippingZip", shippingZip) :
                new ObjectParameter("ShippingZip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Vendors", businessIDParameter, userIdParameter, companyNameParameter, vendorFirstNameParameter, titleParameter, vendorLastNameParameter, vendorTypeIdParameter, bankNameParameter, accountNumParameter, bankAccountTypeIdParameter, rountingNumParameter, bankAddressParameter, paymentTypesIdParameter, creditCardTokenParameter, isTaxableParameter, federalTaxNumParameter, federalTaxValueParameter, stateTaxNumParameter, stateTaxValueParameter, cityTaxNumParameter, cityTaxValueParameter, countyTaxNumParameter, countyTaxValueParameter, emailParameter, phoneParameter, faxParameter, commStreetParameter, commCityIdParameter, commStateIdParameter, commCountryIdParameter, commZipParameter, websiteParameter, billingStreetParameter, billingCityIdParameter, billingStateIdParameter, billingCountryIdParameter, billingZipParameter, shippingStreetParameter, shippingCityIdParameter, shippingStateIdParameter, shippingCountryIdParameter, shippingZipParameter);
        }
    
        public virtual int Update_BankAccounts(Nullable<int> businessID, Nullable<int> userId, Nullable<short> userTypeId, Nullable<long> bankAccountsId, Nullable<short> bankAccountTypeId, string bankName, string accountNum, Nullable<decimal> openingBalance, string accountHolder1Name, string accountHolder2Name, string accountHolder3Name, string swiftCode, string rountingNum, string address, string phone, string fax)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(short));
    
            var bankAccountsIdParameter = bankAccountsId.HasValue ?
                new ObjectParameter("BankAccountsId", bankAccountsId) :
                new ObjectParameter("BankAccountsId", typeof(long));
    
            var bankAccountTypeIdParameter = bankAccountTypeId.HasValue ?
                new ObjectParameter("BankAccountTypeId", bankAccountTypeId) :
                new ObjectParameter("BankAccountTypeId", typeof(short));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("OpeningBalance", openingBalance) :
                new ObjectParameter("OpeningBalance", typeof(decimal));
    
            var accountHolder1NameParameter = accountHolder1Name != null ?
                new ObjectParameter("AccountHolder1Name", accountHolder1Name) :
                new ObjectParameter("AccountHolder1Name", typeof(string));
    
            var accountHolder2NameParameter = accountHolder2Name != null ?
                new ObjectParameter("AccountHolder2Name", accountHolder2Name) :
                new ObjectParameter("AccountHolder2Name", typeof(string));
    
            var accountHolder3NameParameter = accountHolder3Name != null ?
                new ObjectParameter("AccountHolder3Name", accountHolder3Name) :
                new ObjectParameter("AccountHolder3Name", typeof(string));
    
            var swiftCodeParameter = swiftCode != null ?
                new ObjectParameter("SwiftCode", swiftCode) :
                new ObjectParameter("SwiftCode", typeof(string));
    
            var rountingNumParameter = rountingNum != null ?
                new ObjectParameter("RountingNum", rountingNum) :
                new ObjectParameter("RountingNum", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BankAccounts", businessIDParameter, userIdParameter, userTypeIdParameter, bankAccountsIdParameter, bankAccountTypeIdParameter, bankNameParameter, accountNumParameter, openingBalanceParameter, accountHolder1NameParameter, accountHolder2NameParameter, accountHolder3NameParameter, swiftCodeParameter, rountingNumParameter, addressParameter, phoneParameter, faxParameter);
        }
    
        public virtual int Update_Business_Details(Nullable<int> userId, Nullable<int> businessID, string businessName, Nullable<short> businessTypeId, string businessemail, string businessPhone, Nullable<int> licencesRequired, Nullable<int> cityId, Nullable<int> stateId, string businesaddress, string county, Nullable<short> countryId, string zip, string dUNS, string dBA, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessTypeIdParameter = businessTypeId.HasValue ?
                new ObjectParameter("BusinessTypeId", businessTypeId) :
                new ObjectParameter("BusinessTypeId", typeof(short));
    
            var businessemailParameter = businessemail != null ?
                new ObjectParameter("Businessemail", businessemail) :
                new ObjectParameter("Businessemail", typeof(string));
    
            var businessPhoneParameter = businessPhone != null ?
                new ObjectParameter("BusinessPhone", businessPhone) :
                new ObjectParameter("BusinessPhone", typeof(string));
    
            var licencesRequiredParameter = licencesRequired.HasValue ?
                new ObjectParameter("LicencesRequired", licencesRequired) :
                new ObjectParameter("LicencesRequired", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var businesaddressParameter = businesaddress != null ?
                new ObjectParameter("Businesaddress", businesaddress) :
                new ObjectParameter("Businesaddress", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(short));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var dUNSParameter = dUNS != null ?
                new ObjectParameter("DUNS", dUNS) :
                new ObjectParameter("DUNS", typeof(string));
    
            var dBAParameter = dBA != null ?
                new ObjectParameter("DBA", dBA) :
                new ObjectParameter("DBA", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Business_Details", userIdParameter, businessIDParameter, businessNameParameter, businessTypeIdParameter, businessemailParameter, businessPhoneParameter, licencesRequiredParameter, cityIdParameter, stateIdParameter, businesaddressParameter, countyParameter, countryIdParameter, zipParameter, dUNSParameter, dBAParameter, passwordParameter);
        }
    
        public virtual int Update_BusinessItems(Nullable<int> userId, Nullable<int> businessID, Nullable<long> itemId, string title, string uniqueId, Nullable<long> userAccountsId, string desc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<bool> taxable, Nullable<bool> isPreferredPrice)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            var isPreferredPriceParameter = isPreferredPrice.HasValue ?
                new ObjectParameter("IsPreferredPrice", isPreferredPrice) :
                new ObjectParameter("IsPreferredPrice", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BusinessItems", userIdParameter, businessIDParameter, itemIdParameter, titleParameter, uniqueIdParameter, userAccountsIdParameter, descParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, taxableParameter, isPreferredPriceParameter);
        }
    
        public virtual int Update_BusinessProducts(Nullable<int> userId, Nullable<int> businessID, Nullable<long> productsId, string productsTitle, string productsUniqueId, string productsDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var productsIdParameter = productsId.HasValue ?
                new ObjectParameter("ProductsId", productsId) :
                new ObjectParameter("ProductsId", typeof(long));
    
            var productsTitleParameter = productsTitle != null ?
                new ObjectParameter("ProductsTitle", productsTitle) :
                new ObjectParameter("ProductsTitle", typeof(string));
    
            var productsUniqueIdParameter = productsUniqueId != null ?
                new ObjectParameter("ProductsUniqueId", productsUniqueId) :
                new ObjectParameter("ProductsUniqueId", typeof(string));
    
            var productsDescParameter = productsDesc != null ?
                new ObjectParameter("ProductsDesc", productsDesc) :
                new ObjectParameter("ProductsDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BusinessProducts", userIdParameter, businessIDParameter, productsIdParameter, productsTitleParameter, productsUniqueIdParameter, productsDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int Update_BusinessProjects(Nullable<int> userId, Nullable<int> businessID, Nullable<long> projectsId, string projectsTitle, string projectsUniqueId, string projectsDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var projectsIdParameter = projectsId.HasValue ?
                new ObjectParameter("ProjectsId", projectsId) :
                new ObjectParameter("ProjectsId", typeof(long));
    
            var projectsTitleParameter = projectsTitle != null ?
                new ObjectParameter("ProjectsTitle", projectsTitle) :
                new ObjectParameter("ProjectsTitle", typeof(string));
    
            var projectsUniqueIdParameter = projectsUniqueId != null ?
                new ObjectParameter("ProjectsUniqueId", projectsUniqueId) :
                new ObjectParameter("ProjectsUniqueId", typeof(string));
    
            var projectsDescParameter = projectsDesc != null ?
                new ObjectParameter("ProjectsDesc", projectsDesc) :
                new ObjectParameter("ProjectsDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BusinessProjects", userIdParameter, businessIDParameter, projectsIdParameter, projectsTitleParameter, projectsUniqueIdParameter, projectsDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int Update_BusinessServices(Nullable<int> userId, Nullable<int> businessID, Nullable<long> servicesId, string servicesTitle, string servicesUniqueId, string servicesDesc, Nullable<decimal> costPrice, Nullable<decimal> discountPrice, Nullable<decimal> preferredPrice, Nullable<long> userAccountsId, Nullable<bool> taxable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var servicesIdParameter = servicesId.HasValue ?
                new ObjectParameter("ServicesId", servicesId) :
                new ObjectParameter("ServicesId", typeof(long));
    
            var servicesTitleParameter = servicesTitle != null ?
                new ObjectParameter("ServicesTitle", servicesTitle) :
                new ObjectParameter("ServicesTitle", typeof(string));
    
            var servicesUniqueIdParameter = servicesUniqueId != null ?
                new ObjectParameter("ServicesUniqueId", servicesUniqueId) :
                new ObjectParameter("ServicesUniqueId", typeof(string));
    
            var servicesDescParameter = servicesDesc != null ?
                new ObjectParameter("ServicesDesc", servicesDesc) :
                new ObjectParameter("ServicesDesc", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var preferredPriceParameter = preferredPrice.HasValue ?
                new ObjectParameter("PreferredPrice", preferredPrice) :
                new ObjectParameter("PreferredPrice", typeof(decimal));
    
            var userAccountsIdParameter = userAccountsId.HasValue ?
                new ObjectParameter("UserAccountsId", userAccountsId) :
                new ObjectParameter("UserAccountsId", typeof(long));
    
            var taxableParameter = taxable.HasValue ?
                new ObjectParameter("Taxable", taxable) :
                new ObjectParameter("Taxable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BusinessServices", userIdParameter, businessIDParameter, servicesIdParameter, servicesTitleParameter, servicesUniqueIdParameter, servicesDescParameter, costPriceParameter, discountPriceParameter, preferredPriceParameter, userAccountsIdParameter, taxableParameter);
        }
    
        public virtual int Update_CustomersAddress(Nullable<long> customerId, Nullable<int> userId, Nullable<short> addressTypeId, string street, Nullable<int> cityId, Nullable<int> stateId, Nullable<short> countryId, string zip, string email, string phone, string fax, Nullable<short> countyId, Nullable<int> businessID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(short));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(short));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var countyIdParameter = countyId.HasValue ?
                new ObjectParameter("CountyId", countyId) :
                new ObjectParameter("CountyId", typeof(short));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_CustomersAddress", customerIdParameter, userIdParameter, addressTypeIdParameter, streetParameter, cityIdParameter, stateIdParameter, countryIdParameter, zipParameter, emailParameter, phoneParameter, faxParameter, countyIdParameter, businessIDParameter);
        }
    
        public virtual int Update_CustomersBank(Nullable<long> customerId, Nullable<int> userId, Nullable<long> bankAccountsId, Nullable<short> bankAccountTypeId, Nullable<int> businessID, string bankName, string accountNum, string rountingNum, string address)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var bankAccountsIdParameter = bankAccountsId.HasValue ?
                new ObjectParameter("BankAccountsId", bankAccountsId) :
                new ObjectParameter("BankAccountsId", typeof(long));
    
            var bankAccountTypeIdParameter = bankAccountTypeId.HasValue ?
                new ObjectParameter("BankAccountTypeId", bankAccountTypeId) :
                new ObjectParameter("BankAccountTypeId", typeof(short));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var rountingNumParameter = rountingNum != null ?
                new ObjectParameter("RountingNum", rountingNum) :
                new ObjectParameter("RountingNum", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_CustomersBank", customerIdParameter, userIdParameter, bankAccountsIdParameter, bankAccountTypeIdParameter, businessIDParameter, bankNameParameter, accountNumParameter, rountingNumParameter, addressParameter);
        }
    
        public virtual int Update_CustomersDetails(Nullable<long> customerId, Nullable<int> userId, Nullable<int> businessID, string companyName, string customerFirstName, string customerLastName, string title, string webSite)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var customerFirstNameParameter = customerFirstName != null ?
                new ObjectParameter("CustomerFirstName", customerFirstName) :
                new ObjectParameter("CustomerFirstName", typeof(string));
    
            var customerLastNameParameter = customerLastName != null ?
                new ObjectParameter("CustomerLastName", customerLastName) :
                new ObjectParameter("CustomerLastName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_CustomersDetails", customerIdParameter, userIdParameter, businessIDParameter, companyNameParameter, customerFirstNameParameter, customerLastNameParameter, titleParameter, webSiteParameter);
        }
    
        public virtual int Update_CustomersPaymentDetails(Nullable<long> customerId, Nullable<int> userId, Nullable<int> businessID, Nullable<short> creditPeriodTypeId, Nullable<decimal> creditLimit, Nullable<short> paymentTypesId, string creditCardToken)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var creditPeriodTypeIdParameter = creditPeriodTypeId.HasValue ?
                new ObjectParameter("CreditPeriodTypeId", creditPeriodTypeId) :
                new ObjectParameter("CreditPeriodTypeId", typeof(short));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("CreditLimit", creditLimit) :
                new ObjectParameter("CreditLimit", typeof(decimal));
    
            var paymentTypesIdParameter = paymentTypesId.HasValue ?
                new ObjectParameter("PaymentTypesId", paymentTypesId) :
                new ObjectParameter("PaymentTypesId", typeof(short));
    
            var creditCardTokenParameter = creditCardToken != null ?
                new ObjectParameter("CreditCardToken", creditCardToken) :
                new ObjectParameter("CreditCardToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_CustomersPaymentDetails", customerIdParameter, userIdParameter, businessIDParameter, creditPeriodTypeIdParameter, creditLimitParameter, paymentTypesIdParameter, creditCardTokenParameter);
        }
    
        public virtual int Update_CustomersTax(Nullable<long> customerId, Nullable<int> userId, string federalTaxNum, Nullable<decimal> federalTaxValue, string stateTaxNum, Nullable<decimal> stateTaxValue, string cityTaxNum, Nullable<decimal> cityTaxValue, string countyTaxNum, Nullable<decimal> countyTaxValue, Nullable<int> businessID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var federalTaxNumParameter = federalTaxNum != null ?
                new ObjectParameter("FederalTaxNum", federalTaxNum) :
                new ObjectParameter("FederalTaxNum", typeof(string));
    
            var federalTaxValueParameter = federalTaxValue.HasValue ?
                new ObjectParameter("FederalTaxValue", federalTaxValue) :
                new ObjectParameter("FederalTaxValue", typeof(decimal));
    
            var stateTaxNumParameter = stateTaxNum != null ?
                new ObjectParameter("StateTaxNum", stateTaxNum) :
                new ObjectParameter("StateTaxNum", typeof(string));
    
            var stateTaxValueParameter = stateTaxValue.HasValue ?
                new ObjectParameter("StateTaxValue", stateTaxValue) :
                new ObjectParameter("StateTaxValue", typeof(decimal));
    
            var cityTaxNumParameter = cityTaxNum != null ?
                new ObjectParameter("CityTaxNum", cityTaxNum) :
                new ObjectParameter("CityTaxNum", typeof(string));
    
            var cityTaxValueParameter = cityTaxValue.HasValue ?
                new ObjectParameter("CityTaxValue", cityTaxValue) :
                new ObjectParameter("CityTaxValue", typeof(decimal));
    
            var countyTaxNumParameter = countyTaxNum != null ?
                new ObjectParameter("CountyTaxNum", countyTaxNum) :
                new ObjectParameter("CountyTaxNum", typeof(string));
    
            var countyTaxValueParameter = countyTaxValue.HasValue ?
                new ObjectParameter("CountyTaxValue", countyTaxValue) :
                new ObjectParameter("CountyTaxValue", typeof(decimal));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_CustomersTax", customerIdParameter, userIdParameter, federalTaxNumParameter, federalTaxValueParameter, stateTaxNumParameter, stateTaxValueParameter, cityTaxNumParameter, cityTaxValueParameter, countyTaxNumParameter, countyTaxValueParameter, businessIDParameter);
        }
    
        public virtual int Update_VendorsAddress(Nullable<long> vendorId, Nullable<int> userId, Nullable<short> addressTypeId, string street, Nullable<int> cityId, Nullable<int> stateId, Nullable<short> countryId, string zip, string email, string phone, string fax, Nullable<short> countyId, Nullable<int> businessID)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(short));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(short));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var countyIdParameter = countyId.HasValue ?
                new ObjectParameter("CountyId", countyId) :
                new ObjectParameter("CountyId", typeof(short));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_VendorsAddress", vendorIdParameter, userIdParameter, addressTypeIdParameter, streetParameter, cityIdParameter, stateIdParameter, countryIdParameter, zipParameter, emailParameter, phoneParameter, faxParameter, countyIdParameter, businessIDParameter);
        }
    
        public virtual int Update_VendorsBank(Nullable<long> vendorId, Nullable<int> userId, Nullable<long> bankAccountsId, Nullable<short> bankAccountTypeId, Nullable<int> businessID, string bankName, string accountNum, string rountingNum, string address)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var bankAccountsIdParameter = bankAccountsId.HasValue ?
                new ObjectParameter("BankAccountsId", bankAccountsId) :
                new ObjectParameter("BankAccountsId", typeof(long));
    
            var bankAccountTypeIdParameter = bankAccountTypeId.HasValue ?
                new ObjectParameter("BankAccountTypeId", bankAccountTypeId) :
                new ObjectParameter("BankAccountTypeId", typeof(short));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var rountingNumParameter = rountingNum != null ?
                new ObjectParameter("RountingNum", rountingNum) :
                new ObjectParameter("RountingNum", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_VendorsBank", vendorIdParameter, userIdParameter, bankAccountsIdParameter, bankAccountTypeIdParameter, businessIDParameter, bankNameParameter, accountNumParameter, rountingNumParameter, addressParameter);
        }
    
        public virtual int Update_VendorsDetails(Nullable<long> vendorId, Nullable<int> userId, Nullable<int> businessID, string companyName, string vendorFirstName, string vendorLastName, string title, string webSite)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var vendorFirstNameParameter = vendorFirstName != null ?
                new ObjectParameter("VendorFirstName", vendorFirstName) :
                new ObjectParameter("VendorFirstName", typeof(string));
    
            var vendorLastNameParameter = vendorLastName != null ?
                new ObjectParameter("VendorLastName", vendorLastName) :
                new ObjectParameter("VendorLastName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_VendorsDetails", vendorIdParameter, userIdParameter, businessIDParameter, companyNameParameter, vendorFirstNameParameter, vendorLastNameParameter, titleParameter, webSiteParameter);
        }
    
        public virtual int Update_VendorsPaymentDetails(Nullable<long> vendorId, Nullable<int> userId, Nullable<int> businessID, Nullable<short> paymentTypesId, string creditCardToken)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var paymentTypesIdParameter = paymentTypesId.HasValue ?
                new ObjectParameter("PaymentTypesId", paymentTypesId) :
                new ObjectParameter("PaymentTypesId", typeof(short));
    
            var creditCardTokenParameter = creditCardToken != null ?
                new ObjectParameter("CreditCardToken", creditCardToken) :
                new ObjectParameter("CreditCardToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_VendorsPaymentDetails", vendorIdParameter, userIdParameter, businessIDParameter, paymentTypesIdParameter, creditCardTokenParameter);
        }
    
        public virtual int Update_VendorsTax(Nullable<long> vendorId, Nullable<int> userId, string federalTaxNum, Nullable<decimal> federalTaxValue, string stateTaxNum, Nullable<decimal> stateTaxValue, string cityTaxNum, Nullable<decimal> cityTaxValue, string countyTaxNum, Nullable<decimal> countyTaxValue, Nullable<int> businessID)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var federalTaxNumParameter = federalTaxNum != null ?
                new ObjectParameter("FederalTaxNum", federalTaxNum) :
                new ObjectParameter("FederalTaxNum", typeof(string));
    
            var federalTaxValueParameter = federalTaxValue.HasValue ?
                new ObjectParameter("FederalTaxValue", federalTaxValue) :
                new ObjectParameter("FederalTaxValue", typeof(decimal));
    
            var stateTaxNumParameter = stateTaxNum != null ?
                new ObjectParameter("StateTaxNum", stateTaxNum) :
                new ObjectParameter("StateTaxNum", typeof(string));
    
            var stateTaxValueParameter = stateTaxValue.HasValue ?
                new ObjectParameter("StateTaxValue", stateTaxValue) :
                new ObjectParameter("StateTaxValue", typeof(decimal));
    
            var cityTaxNumParameter = cityTaxNum != null ?
                new ObjectParameter("CityTaxNum", cityTaxNum) :
                new ObjectParameter("CityTaxNum", typeof(string));
    
            var cityTaxValueParameter = cityTaxValue.HasValue ?
                new ObjectParameter("CityTaxValue", cityTaxValue) :
                new ObjectParameter("CityTaxValue", typeof(decimal));
    
            var countyTaxNumParameter = countyTaxNum != null ?
                new ObjectParameter("CountyTaxNum", countyTaxNum) :
                new ObjectParameter("CountyTaxNum", typeof(string));
    
            var countyTaxValueParameter = countyTaxValue.HasValue ?
                new ObjectParameter("CountyTaxValue", countyTaxValue) :
                new ObjectParameter("CountyTaxValue", typeof(decimal));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_VendorsTax", vendorIdParameter, userIdParameter, federalTaxNumParameter, federalTaxValueParameter, stateTaxNumParameter, stateTaxValueParameter, cityTaxNumParameter, cityTaxValueParameter, countyTaxNumParameter, countyTaxValueParameter, businessIDParameter);
        }
    
        public virtual int UploadDocuments(Nullable<int> businessID, Nullable<long> userId, Nullable<short> screenId, string fileGUID, string fileName, string filePath, string description)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var screenIdParameter = screenId.HasValue ?
                new ObjectParameter("ScreenId", screenId) :
                new ObjectParameter("ScreenId", typeof(short));
    
            var fileGUIDParameter = fileGUID != null ?
                new ObjectParameter("FileGUID", fileGUID) :
                new ObjectParameter("FileGUID", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UploadDocuments", businessIDParameter, userIdParameter, screenIdParameter, fileGUIDParameter, fileNameParameter, filePathParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<UserVerification_Result> UserVerification(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserVerification_Result>("UserVerification", userNameParameter, passwordParameter);
        }
    
        public virtual int AccountsBalance(Nullable<int> userId, Nullable<int> businessID, Nullable<short> details)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var detailsParameter = details.HasValue ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountsBalance", userIdParameter, businessIDParameter, detailsParameter);
        }
    
        public virtual int Delete_BusinessAssetsToEmployees(Nullable<int> userId, Nullable<int> businessID, Nullable<long> assetsId, Nullable<long> userEmployeeId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(long));
    
            var userEmployeeIdParameter = userEmployeeId.HasValue ?
                new ObjectParameter("UserEmployeeId", userEmployeeId) :
                new ObjectParameter("UserEmployeeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_BusinessAssetsToEmployees", userIdParameter, businessIDParameter, assetsIdParameter, userEmployeeIdParameter);
        }
    
        public virtual ObjectResult<Get_BusinessAssetsToEmployees_Result> Get_BusinessAssetsToEmployees(Nullable<int> userId, Nullable<int> businessID, Nullable<long> assetsId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BusinessAssetsToEmployees_Result>("Get_BusinessAssetsToEmployees", userIdParameter, businessIDParameter, assetsIdParameter);
        }
    
        public virtual ObjectResult<Get_CreditPeriods_Result> Get_CreditPeriods()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CreditPeriods_Result>("Get_CreditPeriods");
        }
    
        public virtual ObjectResult<Get_InvoiceDueTerms_Result> Get_InvoiceDueTerms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_InvoiceDueTerms_Result>("Get_InvoiceDueTerms");
        }
    
        public virtual int Get_InvoicePayments(Nullable<int> userId, Nullable<int> businessID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_InvoicePayments", userIdParameter, businessIDParameter);
        }
    
        public virtual ObjectResult<Get_Invoices_Result> Get_Invoices(Nullable<int> userId, Nullable<int> businessID, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<short> invoiceType, Nullable<long> vendorId, Nullable<long> customerId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var invoiceTypeParameter = invoiceType.HasValue ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(short));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Invoices_Result>("Get_Invoices", userIdParameter, businessIDParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, invoiceTypeParameter, vendorIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<Get_Purchase_Service_Order_Result> Get_Purchase_Service_Order(Nullable<int> userId, Nullable<int> businessID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Purchase_Service_Order_Result>("Get_Purchase_Service_Order", userIdParameter, businessIDParameter);
        }
    
        public virtual ObjectResult<Get_PurchaseInvoicePayments_Result> Get_PurchaseInvoicePayments(Nullable<int> userId, Nullable<int> businessID, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<short> invoiceType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var invoiceTypeParameter = invoiceType.HasValue ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_PurchaseInvoicePayments_Result>("Get_PurchaseInvoicePayments", userIdParameter, businessIDParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, invoiceTypeParameter);
        }
    
        public virtual ObjectResult<Get_PurchaseOrders_Result> Get_PurchaseOrders(Nullable<int> userId, Nullable<int> businessID, Nullable<long> vendorId, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_PurchaseOrders_Result>("Get_PurchaseOrders", userIdParameter, businessIDParameter, vendorIdParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual int Insert_BusinessAssets(Nullable<int> userId, Nullable<int> businessID, string assetDescription, Nullable<System.DateTime> purchasedDate, Nullable<long> userVendorId, Nullable<decimal> initialValue, Nullable<decimal> currentValue, Nullable<short> assetTypeId, string locatedAt, string pONumber, Nullable<short> assetDispositionId, string gLAccountCode, string depreciationGLAccountCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var assetDescriptionParameter = assetDescription != null ?
                new ObjectParameter("AssetDescription", assetDescription) :
                new ObjectParameter("AssetDescription", typeof(string));
    
            var purchasedDateParameter = purchasedDate.HasValue ?
                new ObjectParameter("PurchasedDate", purchasedDate) :
                new ObjectParameter("PurchasedDate", typeof(System.DateTime));
    
            var userVendorIdParameter = userVendorId.HasValue ?
                new ObjectParameter("UserVendorId", userVendorId) :
                new ObjectParameter("UserVendorId", typeof(long));
    
            var initialValueParameter = initialValue.HasValue ?
                new ObjectParameter("InitialValue", initialValue) :
                new ObjectParameter("InitialValue", typeof(decimal));
    
            var currentValueParameter = currentValue.HasValue ?
                new ObjectParameter("CurrentValue", currentValue) :
                new ObjectParameter("CurrentValue", typeof(decimal));
    
            var assetTypeIdParameter = assetTypeId.HasValue ?
                new ObjectParameter("AssetTypeId", assetTypeId) :
                new ObjectParameter("AssetTypeId", typeof(short));
    
            var locatedAtParameter = locatedAt != null ?
                new ObjectParameter("LocatedAt", locatedAt) :
                new ObjectParameter("LocatedAt", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var assetDispositionIdParameter = assetDispositionId.HasValue ?
                new ObjectParameter("AssetDispositionId", assetDispositionId) :
                new ObjectParameter("AssetDispositionId", typeof(short));
    
            var gLAccountCodeParameter = gLAccountCode != null ?
                new ObjectParameter("GLAccountCode", gLAccountCode) :
                new ObjectParameter("GLAccountCode", typeof(string));
    
            var depreciationGLAccountCodeParameter = depreciationGLAccountCode != null ?
                new ObjectParameter("DepreciationGLAccountCode", depreciationGLAccountCode) :
                new ObjectParameter("DepreciationGLAccountCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BusinessAssets", userIdParameter, businessIDParameter, assetDescriptionParameter, purchasedDateParameter, userVendorIdParameter, initialValueParameter, currentValueParameter, assetTypeIdParameter, locatedAtParameter, pONumberParameter, assetDispositionIdParameter, gLAccountCodeParameter, depreciationGLAccountCodeParameter);
        }
    
        public virtual int Insert_BusinessAssetsToEmployees(Nullable<int> userId, Nullable<int> businessID, Nullable<long> assetsId, Nullable<long> userEmployeeId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(long));
    
            var userEmployeeIdParameter = userEmployeeId.HasValue ?
                new ObjectParameter("UserEmployeeId", userEmployeeId) :
                new ObjectParameter("UserEmployeeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BusinessAssetsToEmployees", userIdParameter, businessIDParameter, assetsIdParameter, userEmployeeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> Insert_EstimateDetails(Nullable<int> userId, Nullable<int> businessID, Nullable<long> estimatesId, Nullable<long> itemId, string description, Nullable<int> quantity, Nullable<decimal> amount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var estimatesIdParameter = estimatesId.HasValue ?
                new ObjectParameter("EstimatesId", estimatesId) :
                new ObjectParameter("EstimatesId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("Insert_EstimateDetails", userIdParameter, businessIDParameter, estimatesIdParameter, itemIdParameter, descriptionParameter, quantityParameter, amountParameter);
        }
    
        public virtual ObjectResult<Insert_Estimates_Result> Insert_Estimates(Nullable<int> userId, Nullable<int> businessID, Nullable<long> customerId, string estimateNum, Nullable<System.DateTime> expiryDate, Nullable<decimal> amount, Nullable<short> statusId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var estimateNumParameter = estimateNum != null ?
                new ObjectParameter("EstimateNum", estimateNum) :
                new ObjectParameter("EstimateNum", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Insert_Estimates_Result>("Insert_Estimates", userIdParameter, businessIDParameter, customerIdParameter, estimateNumParameter, expiryDateParameter, amountParameter, statusIdParameter);
        }
    
        public virtual int Insert_InvoicePayment(Nullable<int> userId, Nullable<int> businessID, Nullable<System.DateTime> date, Nullable<decimal> amount, Nullable<short> paidTo, Nullable<short> paymentTypesId, string instrumentNum, Nullable<short> paymentStatusId, string invoiceNumber, Nullable<long> itemId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paidToParameter = paidTo.HasValue ?
                new ObjectParameter("PaidTo", paidTo) :
                new ObjectParameter("PaidTo", typeof(short));
    
            var paymentTypesIdParameter = paymentTypesId.HasValue ?
                new ObjectParameter("PaymentTypesId", paymentTypesId) :
                new ObjectParameter("PaymentTypesId", typeof(short));
    
            var instrumentNumParameter = instrumentNum != null ?
                new ObjectParameter("InstrumentNum", instrumentNum) :
                new ObjectParameter("InstrumentNum", typeof(string));
    
            var paymentStatusIdParameter = paymentStatusId.HasValue ?
                new ObjectParameter("PaymentStatusId", paymentStatusId) :
                new ObjectParameter("PaymentStatusId", typeof(short));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_InvoicePayment", userIdParameter, businessIDParameter, dateParameter, amountParameter, paidToParameter, paymentTypesIdParameter, instrumentNumParameter, paymentStatusIdParameter, invoiceNumberParameter, itemIdParameter);
        }
    
        public virtual int Insert_PurchaseInvoiceDetails(Nullable<int> userId, Nullable<int> businessID, Nullable<long> purchaseInvoiceId, Nullable<long> itemId, string description, Nullable<int> quantity, Nullable<decimal> amount, Nullable<decimal> tax, Nullable<decimal> taxPercent)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var purchaseInvoiceIdParameter = purchaseInvoiceId.HasValue ?
                new ObjectParameter("PurchaseInvoiceId", purchaseInvoiceId) :
                new ObjectParameter("PurchaseInvoiceId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var taxPercentParameter = taxPercent.HasValue ?
                new ObjectParameter("TaxPercent", taxPercent) :
                new ObjectParameter("TaxPercent", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PurchaseInvoiceDetails", userIdParameter, businessIDParameter, purchaseInvoiceIdParameter, itemIdParameter, descriptionParameter, quantityParameter, amountParameter, taxParameter, taxPercentParameter);
        }
    
        public virtual int Insert_PurchaseInvoices(Nullable<int> userId, Nullable<int> businessID, string invoiceTitle, Nullable<long> vendorId, Nullable<long> purchaseOrderId, Nullable<short> dueTermId, Nullable<System.DateTime> dueDate, Nullable<decimal> amount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var invoiceTitleParameter = invoiceTitle != null ?
                new ObjectParameter("InvoiceTitle", invoiceTitle) :
                new ObjectParameter("InvoiceTitle", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
                new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
                new ObjectParameter("PurchaseOrderId", typeof(long));
    
            var dueTermIdParameter = dueTermId.HasValue ?
                new ObjectParameter("DueTermId", dueTermId) :
                new ObjectParameter("DueTermId", typeof(short));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PurchaseInvoices", userIdParameter, businessIDParameter, invoiceTitleParameter, vendorIdParameter, purchaseOrderIdParameter, dueTermIdParameter, dueDateParameter, amountParameter);
        }
    
        public virtual int Insert_PurchaseOrders(Nullable<int> userId, Nullable<int> businessID, string pOTitle, Nullable<long> vendorId, Nullable<System.DateTime> expiryDate, Nullable<decimal> amount, Nullable<short> statusId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var pOTitleParameter = pOTitle != null ?
                new ObjectParameter("POTitle", pOTitle) :
                new ObjectParameter("POTitle", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PurchaseOrders", userIdParameter, businessIDParameter, pOTitleParameter, vendorIdParameter, expiryDateParameter, amountParameter, statusIdParameter);
        }
    
        public virtual int Insert_PurchaseOrdersDetails(Nullable<int> userId, Nullable<int> businessID, Nullable<long> purchaseOrderId, Nullable<long> itemId, string description, Nullable<int> quantity, Nullable<decimal> amount, Nullable<decimal> tax, Nullable<decimal> taxPercent)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
                new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
                new ObjectParameter("PurchaseOrderId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var taxPercentParameter = taxPercent.HasValue ?
                new ObjectParameter("TaxPercent", taxPercent) :
                new ObjectParameter("TaxPercent", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PurchaseOrdersDetails", userIdParameter, businessIDParameter, purchaseOrderIdParameter, itemIdParameter, descriptionParameter, quantityParameter, amountParameter, taxParameter, taxPercentParameter);
        }
    
        public virtual int Insert_SalesInvoiceDetails(Nullable<int> userId, Nullable<int> businessID, Nullable<long> salesInvoiceId, Nullable<long> itemId, string description, Nullable<int> quantity, Nullable<decimal> amount, Nullable<decimal> tax, Nullable<decimal> taxPercent)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var salesInvoiceIdParameter = salesInvoiceId.HasValue ?
                new ObjectParameter("SalesInvoiceId", salesInvoiceId) :
                new ObjectParameter("SalesInvoiceId", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var taxPercentParameter = taxPercent.HasValue ?
                new ObjectParameter("TaxPercent", taxPercent) :
                new ObjectParameter("TaxPercent", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_SalesInvoiceDetails", userIdParameter, businessIDParameter, salesInvoiceIdParameter, itemIdParameter, descriptionParameter, quantityParameter, amountParameter, taxParameter, taxPercentParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> Insert_SalesInvoices(Nullable<int> userId, Nullable<int> businessID, string invoiceTitle, Nullable<long> customerId, Nullable<long> estimatesId, Nullable<short> dueTermId, Nullable<System.DateTime> dueDate, Nullable<decimal> amount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var invoiceTitleParameter = invoiceTitle != null ?
                new ObjectParameter("InvoiceTitle", invoiceTitle) :
                new ObjectParameter("InvoiceTitle", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var estimatesIdParameter = estimatesId.HasValue ?
                new ObjectParameter("EstimatesId", estimatesId) :
                new ObjectParameter("EstimatesId", typeof(long));
    
            var dueTermIdParameter = dueTermId.HasValue ?
                new ObjectParameter("DueTermId", dueTermId) :
                new ObjectParameter("DueTermId", typeof(short));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("Insert_SalesInvoices", userIdParameter, businessIDParameter, invoiceTitleParameter, customerIdParameter, estimatesIdParameter, dueTermIdParameter, dueDateParameter, amountParameter);
        }
    
        public virtual int ReportTestingProcedure(Nullable<short> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReportTestingProcedure", idParameter);
        }
    
        public virtual int Rpt_DayWiseLedger(Nullable<int> businessId, Nullable<int> accountsId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> userId, Nullable<int> categoryType)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            var accountsIdParameter = accountsId.HasValue ?
                new ObjectParameter("AccountsId", accountsId) :
                new ObjectParameter("AccountsId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var categoryTypeParameter = categoryType.HasValue ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rpt_DayWiseLedger", businessIdParameter, accountsIdParameter, fromDateParameter, toDateParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, userIdParameter, categoryTypeParameter);
        }
    
        public virtual int Rpt_Ledger(Nullable<int> businessId, Nullable<int> accountsId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> userId, Nullable<int> categoryType)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            var accountsIdParameter = accountsId.HasValue ?
                new ObjectParameter("AccountsId", accountsId) :
                new ObjectParameter("AccountsId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var categoryTypeParameter = categoryType.HasValue ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rpt_Ledger", businessIdParameter, accountsIdParameter, fromDateParameter, toDateParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, userIdParameter, categoryTypeParameter);
        }
    
        public virtual int Rpt_MonthWiseLedger(Nullable<int> businessId, Nullable<int> accountsId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> userId, Nullable<int> categoryType)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            var accountsIdParameter = accountsId.HasValue ?
                new ObjectParameter("AccountsId", accountsId) :
                new ObjectParameter("AccountsId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var categoryTypeParameter = categoryType.HasValue ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rpt_MonthWiseLedger", businessIdParameter, accountsIdParameter, fromDateParameter, toDateParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, userIdParameter, categoryTypeParameter);
        }
    
        public virtual int Rpt_TrialBalance(Nullable<int> businessId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> userId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rpt_TrialBalance", businessIdParameter, fromDateParameter, toDateParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, userIdParameter);
        }
    
        public virtual int Update_BusinessAssets(Nullable<int> userId, Nullable<long> assetsId, string assetDescription, Nullable<System.DateTime> purchasedDate, Nullable<long> userVendorId, Nullable<decimal> initialValue, Nullable<decimal> currentValue, Nullable<short> assetTypeId, string locatedAt, string pONumber, Nullable<short> assetDispositionId, string gLAccountCode, string depreciationGLAccountCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var assetsIdParameter = assetsId.HasValue ?
                new ObjectParameter("AssetsId", assetsId) :
                new ObjectParameter("AssetsId", typeof(long));
    
            var assetDescriptionParameter = assetDescription != null ?
                new ObjectParameter("AssetDescription", assetDescription) :
                new ObjectParameter("AssetDescription", typeof(string));
    
            var purchasedDateParameter = purchasedDate.HasValue ?
                new ObjectParameter("PurchasedDate", purchasedDate) :
                new ObjectParameter("PurchasedDate", typeof(System.DateTime));
    
            var userVendorIdParameter = userVendorId.HasValue ?
                new ObjectParameter("UserVendorId", userVendorId) :
                new ObjectParameter("UserVendorId", typeof(long));
    
            var initialValueParameter = initialValue.HasValue ?
                new ObjectParameter("InitialValue", initialValue) :
                new ObjectParameter("InitialValue", typeof(decimal));
    
            var currentValueParameter = currentValue.HasValue ?
                new ObjectParameter("CurrentValue", currentValue) :
                new ObjectParameter("CurrentValue", typeof(decimal));
    
            var assetTypeIdParameter = assetTypeId.HasValue ?
                new ObjectParameter("AssetTypeId", assetTypeId) :
                new ObjectParameter("AssetTypeId", typeof(short));
    
            var locatedAtParameter = locatedAt != null ?
                new ObjectParameter("LocatedAt", locatedAt) :
                new ObjectParameter("LocatedAt", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var assetDispositionIdParameter = assetDispositionId.HasValue ?
                new ObjectParameter("AssetDispositionId", assetDispositionId) :
                new ObjectParameter("AssetDispositionId", typeof(short));
    
            var gLAccountCodeParameter = gLAccountCode != null ?
                new ObjectParameter("GLAccountCode", gLAccountCode) :
                new ObjectParameter("GLAccountCode", typeof(string));
    
            var depreciationGLAccountCodeParameter = depreciationGLAccountCode != null ?
                new ObjectParameter("DepreciationGLAccountCode", depreciationGLAccountCode) :
                new ObjectParameter("DepreciationGLAccountCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BusinessAssets", userIdParameter, assetsIdParameter, assetDescriptionParameter, purchasedDateParameter, userVendorIdParameter, initialValueParameter, currentValueParameter, assetTypeIdParameter, locatedAtParameter, pONumberParameter, assetDispositionIdParameter, gLAccountCodeParameter, depreciationGLAccountCodeParameter);
        }
    
        public virtual int Update_PurchaseInvoicePaymentStatus(Nullable<long> purchaseInvoicePaymentId, Nullable<short> invoicestatusId, Nullable<int> businessID, Nullable<int> userId)
        {
            var purchaseInvoicePaymentIdParameter = purchaseInvoicePaymentId.HasValue ?
                new ObjectParameter("PurchaseInvoicePaymentId", purchaseInvoicePaymentId) :
                new ObjectParameter("PurchaseInvoicePaymentId", typeof(long));
    
            var invoicestatusIdParameter = invoicestatusId.HasValue ?
                new ObjectParameter("InvoicestatusId", invoicestatusId) :
                new ObjectParameter("InvoicestatusId", typeof(short));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PurchaseInvoicePaymentStatus", purchaseInvoicePaymentIdParameter, invoicestatusIdParameter, businessIDParameter, userIdParameter);
        }
    
        public virtual int Update_PurchaseInvoicesStatus(Nullable<int> userId, Nullable<int> businessID, Nullable<long> purchaseInvoiceId, Nullable<short> invoicestatusId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var purchaseInvoiceIdParameter = purchaseInvoiceId.HasValue ?
                new ObjectParameter("PurchaseInvoiceId", purchaseInvoiceId) :
                new ObjectParameter("PurchaseInvoiceId", typeof(long));
    
            var invoicestatusIdParameter = invoicestatusId.HasValue ?
                new ObjectParameter("InvoicestatusId", invoicestatusId) :
                new ObjectParameter("InvoicestatusId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PurchaseInvoicesStatus", userIdParameter, businessIDParameter, purchaseInvoiceIdParameter, invoicestatusIdParameter);
        }
    
        public virtual int Update_PurchaseOrderStatus(Nullable<int> userId, Nullable<int> businessID, Nullable<long> purchaseOrderId, Nullable<short> invoicestatusId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
                new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
                new ObjectParameter("PurchaseOrderId", typeof(long));
    
            var invoicestatusIdParameter = invoicestatusId.HasValue ?
                new ObjectParameter("InvoicestatusId", invoicestatusId) :
                new ObjectParameter("InvoicestatusId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_PurchaseOrderStatus", userIdParameter, businessIDParameter, purchaseOrderIdParameter, invoicestatusIdParameter);
        }
    
        public virtual ObjectResult<Get_Accounts_Result> Get_Accounts(Nullable<short> businessId, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(short));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Accounts_Result>("Get_Accounts", businessIdParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<Get_BusinessAssets_Result> Get_BusinessAssets(Nullable<int> businessId, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BusinessAssets_Result>("Get_BusinessAssets", businessIdParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<Get_BusinessAssetTypes_Result> Get_BusinessAssetTypes(Nullable<short> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BusinessAssetTypes_Result>("Get_BusinessAssetTypes", businessIdParameter);
        }
    
        public virtual ObjectResult<Get_StratusClients_Result> Get_StratusClients(Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_StratusClients_Result>("Get_StratusClients", pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<Get_UserAccountTypes_Result> Get_UserAccountTypes(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_UserAccountTypes_Result>("Get_UserAccountTypes", businessIdParameter);
        }
    
        public virtual ObjectResult<Get_UserParentAccountTypes_Result> Get_UserParentAccountTypes(Nullable<int> businessId)
        {
            var businessIdParameter = businessId.HasValue ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_UserParentAccountTypes_Result>("Get_UserParentAccountTypes", businessIdParameter);
        }
    
        public virtual int Insert_BusinessAssetTypes(Nullable<int> userId, Nullable<int> businessID, string assetName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_BusinessAssetTypes", userIdParameter, businessIDParameter, assetNameParameter);
        }
    
        public virtual int Insert_Update_BusinessPreferences(Nullable<int> userId, Nullable<int> businessID, Nullable<short> preferenceFieldsId, Nullable<short> preferenceValuesId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var preferenceFieldsIdParameter = preferenceFieldsId.HasValue ?
                new ObjectParameter("PreferenceFieldsId", preferenceFieldsId) :
                new ObjectParameter("PreferenceFieldsId", typeof(short));
    
            var preferenceValuesIdParameter = preferenceValuesId.HasValue ?
                new ObjectParameter("PreferenceValuesId", preferenceValuesId) :
                new ObjectParameter("PreferenceValuesId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Update_BusinessPreferences", userIdParameter, businessIDParameter, preferenceFieldsIdParameter, preferenceValuesIdParameter);
        }
    
        public virtual int Insert_Update_BusinessTaxDetails(Nullable<int> userId, Nullable<int> businessID, Nullable<short> taxTypesId, string taxNumber, Nullable<decimal> taxValue)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var taxTypesIdParameter = taxTypesId.HasValue ?
                new ObjectParameter("TaxTypesId", taxTypesId) :
                new ObjectParameter("TaxTypesId", typeof(short));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var taxValueParameter = taxValue.HasValue ?
                new ObjectParameter("TaxValue", taxValue) :
                new ObjectParameter("TaxValue", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Update_BusinessTaxDetails", userIdParameter, businessIDParameter, taxTypesIdParameter, taxNumberParameter, taxValueParameter);
        }
    
        public virtual int Insert_Update_CustomizeFields(Nullable<int> userId, Nullable<int> businessID, Nullable<short> customersRenameId, byte[] logo, string invoiceTerms, string pOTerms, string customField1Label, string customField2Label, string customField3Label)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var customersRenameIdParameter = customersRenameId.HasValue ?
                new ObjectParameter("CustomersRenameId", customersRenameId) :
                new ObjectParameter("CustomersRenameId", typeof(short));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var invoiceTermsParameter = invoiceTerms != null ?
                new ObjectParameter("InvoiceTerms", invoiceTerms) :
                new ObjectParameter("InvoiceTerms", typeof(string));
    
            var pOTermsParameter = pOTerms != null ?
                new ObjectParameter("POTerms", pOTerms) :
                new ObjectParameter("POTerms", typeof(string));
    
            var customField1LabelParameter = customField1Label != null ?
                new ObjectParameter("CustomField1Label", customField1Label) :
                new ObjectParameter("CustomField1Label", typeof(string));
    
            var customField2LabelParameter = customField2Label != null ?
                new ObjectParameter("CustomField2Label", customField2Label) :
                new ObjectParameter("CustomField2Label", typeof(string));
    
            var customField3LabelParameter = customField3Label != null ?
                new ObjectParameter("CustomField3Label", customField3Label) :
                new ObjectParameter("CustomField3Label", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Update_CustomizeFields", userIdParameter, businessIDParameter, customersRenameIdParameter, logoParameter, invoiceTermsParameter, pOTermsParameter, customField1LabelParameter, customField2LabelParameter, customField3LabelParameter);
        }
    
        public virtual int Insert_Update_GreetingEmails(Nullable<int> userId, Nullable<int> businessID, Nullable<short> greetingsListId, string subject, string message)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var greetingsListIdParameter = greetingsListId.HasValue ?
                new ObjectParameter("GreetingsListId", greetingsListId) :
                new ObjectParameter("GreetingsListId", typeof(short));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Update_GreetingEmails", userIdParameter, businessIDParameter, greetingsListIdParameter, subjectParameter, messageParameter);
        }
    }
}
