@model StratusAccounting.Models.PurchaseInvoicePayment
@{
    ViewBag.Title = "Payments";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@*<link href="~/Scripts/plugins/bootstrap-fileupload/bootstrap-fileupload.css" rel="stylesheet" />*@
@Scripts.Render("~/bundle/Script/Dashboard")
    

    <div class="page-content">
    @using (Html.BeginForm(new { ReturnUrl = ViewBag.ReturnUrl }))
    {
        <!-- BEGIN PAGE CONTAINER-->
        <div class="container-fluid">
            <!-- BEGIN PAGE HEADER-->
            <div class="row-fluid">
                <div class="span12">

                    <!-- BEGIN PAGE TITLE & BREADCRUMB-->
                    <!--<h3 class="page-title">Preferences</h3>-->
                    <ul class="breadcrumb margin-top-20">
                        <li><i class="icon-home"></i><a href="index.html">Home</a> <i class="icon-angle-right"></i></li>
                        <li><a href="chart_of_accounts.html">Transactions</a></li>
                        <li><a href="invoice.html"><i class="icon-angle-right"></i>Invoices</a></li>
                        <li><a href="invoice_payments.html"><i class="icon-angle-right"></i>Payment</a></li>
                    </ul>
                    <!-- END PAGE TITLE & BREADCRUMB-->
                </div>
            </div>
            <!-- END PAGE HEADER-->
            <!-- BEGIN PAGE CONTENT-->
            <div class="row-fluid">
                <div class="span12">
                    <!-- BEGIN SAMPLE FORM PORTLET-->
                    <div class="portlet box blue border-topf">
                        <div class="portlet-body form">
                            <!-- BEGIN FORM-->
                            <!-- <h3 class="page-title matop border-btoom">create Customer <a href="#"><i class="icon-plus-sign"></i></a></h3>-->
                            <form class="horizontal-form" action="#">
                                <h3 class="form-section matop">New Payment</h3>

                                <div class="row-fluid">
                                    <div class="span12">
                                        <div class="control-group">
                                            <div class="controls">
                                                <label class="control-label">Bank Name</label>
                                                @* @Html.DropDownListFor(model => model.BankAccountId, (SelectList)ViewBag.GetBankAccounts, "--Select--", new { @id = "ddlBanks", @class = "m-wrap span12 border-form-radius" })*@
                                                @Html.HiddenFor(model => model.BankAccountId, new { @id = "hdnBankAccountId" })
                                                @Html.TextBoxFor(model => model.AccountName, new { @id = "txtBankAccounts", @class = "m-wrap span12 date-picker border-form-radius" })
                                            </div>
                                        </div>
                                    </div>

                                </div>

                                <div class="row-fluid">
                                    <div class="span6">
                                        <div class="control-group">
                                            <div class="controls">
                                                <label class="control-label">Date</label>
                                                @Html.HiddenFor(model => model.Date)
                                                <input class="m-wrap span12 date-picker border-form-radius" size="16" type="text" name="txtPaymentDate" id="txtPaymentDate" value="">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="span6">
                                        <div class="control-group">
                                            <div class="controls">
                                                <label class="control-label">Amount</label>
                                                @Html.TextBoxFor(model => model.Amount, new { @id = "txtAmount", @class = "m-wrap span12 date-picker border-form-radius", @size = 16 })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row-fluid">
                                    <div class="span6">
                                        <div class="control-group">
                                            <div class="controls">
                                                <label class="control-label">Paid To</label>
                                                <select class="m-wrap span12 border-form-radius" id="ddlPaidto">
                                                    <option value="0">Select</option>
                                                    <option value="1">Customer</option>
                                                    <option value="2">Employee</option>
                                                    <option value="3">Vendor</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="span6">
                                        <div class="control-group">
                                            <div class="controls">
                                                <label class="control-label">Instrument</label>
                                                @Html.DropDownListFor(model => model.PaymentTypesId, (SelectList)ViewBag.GetInstrumentTypes, "--Select--", new { @id = "ddlInstruments", @class = "m-wrap span12 border-form-radius" })

                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row-fluid">
                                    <div class="span6">
                                        <div class="control-group">
                                            <div class="controls">
                                                <label class="control-label">Instrument #</label>
                                                @Html.TextBoxFor(model => model.InstrumentNum, new { @id = "txtInstrumentNo", @class = "m-wrap span12 date-picker border-form-radius", @size = 16 })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="span6">
                                        <div class="control-group">
                                            <div class="controls">
                                                <label class="control-label">Status</label>
                                                @Html.DropDownListFor(model => model.PaymentStatusId, (SelectList)ViewBag.GetPaymentStatusTypes, "--Select--", new { @id = "ddlStatus", @class = "m-wrap span12 border-form-radius" })
                                                <span id="span"></span>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="row-fluid">
                                    <div class="span6 ">
                                        <div class="control-group">
                                            <label for="firstName" class="control-label">Received for</label>
                                            <div class="controls">
                                                @Html.HiddenFor(model => model.PurchaseInvoiceId, new { @id = "hdnPurchaseInvoiceId" })
                                                @Html.TextBoxFor(model => model.ReceivedFor, new { @id = "txtRcvdFor", @class = "m-wrap span12 date-picker border-form-radius", @size = 16 })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="span6 ">
                                        <div class="control-group">
                                            <div class="controls">
                                                <label class="control-label">Tags</label>
                                                @Html.HiddenFor(model => model.Tags, new { @id = "hdnTags" })
                                                <input type="text" class="m-wrap span12 border-form-radius" id="txtTags" disabled="disabled">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="clearfix"></div>
                                <div class="form-actions ">
                                    @Html.HiddenFor(model => model.PurchaseInvoicePaymentId, new { @id = "hdnPurchaseInvoicePaymentId" })
                                    @Html.HiddenFor(model => model.CurrentPaymentStatusId, new { @id = "hdnCurrentPaymentStatusId" })
                                    @Html.HiddenFor(model => model.NextPaymentStatusId, new { @id = "hdnNextPaymentStatusId" })
                                    @Html.HiddenFor(model => model.NextPaymentStatus, new { @id = "hdnNextPaymentStatus" })
                                    @Html.HiddenFor(model => model.CurrentPaymentStatus, new { @id = "hdnCurrentPaymentStatus" })
                                    <input type="hidden" value="0" id="hdnBtns" name="hdnBtns" />
                                    <button class="btn blue" type="submit"><i class="icon-plus-sign"></i>Add</button>
                                    @*<button class="btn blue" type="submit" id="btnSubmit"><i class="icon-plus-sign"></i>Add</button>*@
                                    <button class="btn" type="button" id="btnCancel">Cancel</button>
                                </div>
                            </form>
                            <!-- END FORM-->
                        </div>
                    </div>
                    <!-- END SAMPLE FORM PORTLET-->
                </div>
            </div>

            <!-- END PAGE CONTENT-->
        </div>
    }
    </div>


<script src="~/Scripts/scripts/app.js"></script>
<script src="~/Scripts/scripts/table-advanced.js"></script>

<script src="~/Scripts/scripts/form-components.js"></script>
<script type="text/javascript">
    $(document).ready(
        function () {
            $("#txtPaymentDate").datepicker();

            if(@ViewBag.paidTo!=null)
            {
                var ddlPaidto=@ViewBag.paidTo;
                $("#ddlPaidto").val(ddlPaidto);
            }
            $("#txtTags").val( $("#hdnTags").val());
        });

    $("#btnCancel").click(function () {

        });

        $("#ddlStatus").change(function(){
            $('#span').text("");
    });


    $("#btnSubmit").click(function () {

        $("#hdnBtns").val("1");
        var txtPaymentDate = $('#txtPaymentDate').val();
        var txtAmount = $('#txtAmount').val();
        var txtInstrument = $('#txtInstrumentNo').val();
        var txtreceivedfor = $('#txtRcvdFor').val();
        var txtBankAccounts = $('#txtBankAccounts').val();
        var hdnBankAccountId = $('#hdnBankAccountId').val();
        var hdnPurchaseInvoicePaymentId = $('#hdnPurchaseInvoicePaymentId').val();
        var hdnCurrentPaymentStatusId = $('#hdnCurrentPaymentStatusId').val();
        var hdnNextPaymentStatusId = $('#hdnNextPaymentStatusId').val();
        var hdnNextPaymentStatus = $('#hdnNextPaymentStatus').val();
        var hdnCurrentPaymentStatus = $('#hdnCurrentPaymentStatus').val();
        try {
            if (txtBankAccounts.toString().trim() != '' && eval(hdnBankAccountId) > 0) {
                //  $('#Date').val(txtPaymentDate);
            }
            else {
                $('#hdnBankAccountId').focus();
                return false;
            }

            if (txtPaymentDate.toString().trim() != '') {
                //  $('#Date').val(txtPaymentDate);
            }
            else {
                $('#txtPaymentDate').focus();
                return false;
            }


            if (txtAmount.toString().trim() != '') {
            }
            else {
                $('#txtAmount').focus();
                return false;
            }

            if ($("#ddlPaidto").val().toString() != "" && $("#ddlPaidto").val().toString() != "0") {
            }
            else {
                $('#ddlPaidto').focus();
                return false;
            }

            if ($("#ddlInstruments").val().toString() != "" && $("#ddlInstruments").val().toString() != "0") {
            }
            else {
                $('#ddlInstruments').focus();
                return false;
            }

            if (txtInstrument.toString().trim() != '') {
            }
            else {
                $('#txtInstrumentNo').focus();
                return false;
            }

            if (($("#ddlStatus").val().toString() != "" && $("#ddlStatus").val().toString() != "0")) {
                if (eval(hdnPurchaseInvoicePaymentId) > 0) {
                    if ($("#ddlStatus").val().toString() == hdnNextPaymentStatusId.toString()) {
            }
            else {
                $('#ddlStatus').focus();
                            $('#span').text("Status Changed to " + hdnNextPaymentStatus + " from " + hdnCurrentPaymentStatus);

                return false;
            }
                }
            }
            else {
                $('#ddlStatus').focus();
                return false;
            }
            if (txtreceivedfor.toString().trim() != '') {
            }
            else {
                $('#txtRcvdFor').focus();
                return false;
            }


        }
        catch (e) {
            return false;
        }


    });


</script>
<script>
    $(function () {
        $('#txtBankAccounts').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetPaymentBankAccounts")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        keyword: $("#txtBankAccounts").val()
                    },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.BankName,
                                value: item.BankAccountsId
                            };
                        }));
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }
                });
            },
            select: function (event, ui) {
                $('#txtBankAccounts').val(ui.item.label);
                $('#hdnBankAccountId').val(ui.item.value);
                return false;
            },
            minLength: 1
        });


        $('#txtRcvdFor').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetInvociesList")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        keyword: $("#txtRcvdFor").val()
                    },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.InvoiceNumber,
                                value: item.PurchaseInvoiceId
                            };
                        }));
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }

                });
            },
            select: function (event, ui) {
                $('#txtRcvdFor').val(ui.item.label);
                $('#hdnPurchaseInvoiceId').val(ui.item.value);

                $.ajax({
                    url: '@Url.Action("GetInvociesTages")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        InvoiceID: $("#hdnPurchaseInvoiceId").val()
                    },
                    success: function (data) {
                        //response($.map(data, function (item) {
                        //    return {
                        //        label: item.BankName,
                        //        value: item.BankAccountsId
                        //    };
                        //}));
                        $('#txtTags').val(data);

                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }
                });

                return false;
            },
            minLength: 1
        });
    });
</script>
