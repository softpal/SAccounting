@model StratusAccounting.Models.VendorsAddress


<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
    <h3>Communication Details</h3>
</div>

<div class="modal-body">
    <div class="scroller" data-always-visible="1" data-rail-visible1="1">
        <div class="row-fluid">
            <div class="span6 ">
                <div class="control-group">
                    <label for="firstName" class="control-label">Office Email</label>
                    <div class="controls">
                        @Html.EditorFor(model => model.Email)
                        @Html.HiddenFor(model => model.UserVendorId)
                    </div>
                </div>

                <div class="control-group">
                    <label for="firstName" class="control-label">Business Phone</label>
                    <div class="controls">
                        @Html.EditorFor(model => model.Phone)
                    </div>
                </div>

                <div class="control-group">
                    <label for="firstName" class="control-label">Business FAX</label>
                    <div class="controls">
                        @Html.EditorFor(model => model.Fax)
                    </div>
                </div>

                <div class="control-group">
                    <label for="firstName" class="control-label">Street</label>
                    <div class="controls">
                        @Html.EditorFor(model => model.Street)
                    </div>
                </div>

                <div class="control-group">
                    <label for="firstName" class="control-label">Country</label>
                    <div class="controls">
                        @Html.HiddenFor(model => model.CountryId, new { @id = "hdnCountryId" })
                        @Html.TextBoxFor(model=>model.Country, new{ @autocomplete="on", @required ="required"})
                        @Html.ValidationMessageFor(model => model.Country)
                       @* @Html.EditorFor(model => model.Country)*@
                    </div>
                </div>
                <div class="control-group">
                    <label for="firstName" class="control-label">State</label>
                    <div class="controls">
                        @Html.HiddenFor(model => model.StateId, new { @id = "hdnStateId" })
                        @Html.EditorFor(model=>model.State, new{ @autocomplete="on", @placeholder="Select State", @required ="required"})
                        @Html.ValidationMessageFor(model => model.State)
                        @*@Html.EditorFor(model => model.State)*@
                    </div>
                </div>
                <div class="control-group">
                    <label for="firstName" class="control-label">City</label>
                    <div class="controls">
                        @Html.HiddenFor(model => model.CityId, new { @id = "hdnCityId" })
                        @Html.EditorFor(model=>model.City, new{ @class="m-wrap span12 border-form-radius", @autocomplete="on", @placeholder="Select City", @required ="required"})
                        @Html.ValidationMessageFor(model => model.City)
                        @*@Html.EditorFor(model => model.City)*@
                    </div>
                </div>
                <div class="control-group">
                    <label for="firstName" class="control-label">Zip</label>
                    <div class="controls">
                        @Html.EditorFor(model => model.Zip)
                    </div>
                </div>

                <div class="control-group">
                    <label for="firstName" class="control-label">Website</label>
                    <div class="controls">
                        @Html.EditorFor(model => model.UserVendorId)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal-footer">
    <input type="button" class="btn blue" onclick="SaveCommunicationDetails();" value="Save" />
    <a class="btn" onclick="CloseAddPopup();">Cancel</a>
</div>

<script>
    function SaveCommunicationDetails() {
        var strDetails = new Array();
        strDetails.push($("#UserVendorId").val());
        strDetails.push($("#Email").val());
        strDetails.push($("#Phone").val());
        strDetails.push($("#Fax").val());
        strDetails.push($("#Street").val());
        strDetails.push($("#CountryId").val());
        strDetails.push($("#StateId").val());
        strDetails.push($("#CityId").val());
        strDetails.push($("#Zip").val());
        $.ajax({
            type: "POST",
            contentType: "application/json",
            url: "/Vendors/SaveCommunicationDetails",
            data: JSON.stringify({ "vendorAddress": strDetails, "addressType": 1 }),
            success: function (data) {
                if (data) {
                    CloseAddPopup();
                    var url = '@Url.Action("VendorDetails", "Vendors", new { id = "__id__" })';
                    window.location.href = url.replace('__id__', strDetails[0]);
                }
            },
            error: function (data) {
                //debugger;
            }
        });
    }

    function CloseAddPopup() {
        $(".close").click();
    }

    var url = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi", action = "GetCountries" })';
    $("#Country").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: url,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    //debugger;
                    response($.map(data, function (item) {
                        return {
                            label: item.CountryName,
                            value: item.CountryId
                        };
                    }));
                },
                error: function (data) {
                    // debugger;
                }
            });
        },
        focus: function (event, ui) {
            //debugger;
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            //debugger;
            $('#Country').val(ui.item.label);
            $('#hdnCountryId').val(ui.item.value);

            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function (data) { //debugger; 
            }
        }
    });

    var stateapi = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi", action = "GetStates" })';
    //debugger;
    $('#State').autocomplete({
        source: function (request, response) {
            //debugger;
            var countryId = $("#hdnCountryId").val();
            //debugger;
            if (countryId > 0) {
                $.ajax({
                    url: stateapi,
                    data: { country: countryId, query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.StateName,
                                value: item.StateId
                            };
                        }));
                    }
                });
            }
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#State').val(ui.item.label);
            $('#hdnStateId').val(ui.item.value);
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });

    var cityapi = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi", action = "GetCity" })';
    //debugger;
    $('#City').autocomplete({
        source: function (request, response) {
            //debugger;
            var stateID = $("#hdnStateId").val();
            //debugger;
            if (stateID > 0) {
                $.ajax({
                    url: cityapi,
                    data: { state: stateID, query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.CityName,
                                value: item.CityId
                            };
                        }));
                    }
                });
            }
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#City').val(ui.item.label);
            $('#hdnCityId').val(ui.item.value);
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });
</script>
