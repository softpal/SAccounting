@model StratusAccounting.Models.Add_Vendor
@{
    ViewBag.Title = "NewVendor";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Styles.Render("~/bundle/Datepicker")

<div class="page-content">
        <!-- BEGIN PAGE CONTAINER-->
        <div class="container-fluid">
            <!-- BEGIN PAGE HEADER-->
            <div class="row-fluid">
                <div class="span12">
                    <!-- BEGIN PAGE TITLE & BREADCRUMB-->
                    <ul class="breadcrumb margin-top-20">
                        <li><i class="icon-home"></i><a href="/Home/Dashboard">Home</a> <i class="icon-angle-right"></i></li>
                        <li><a href="/Vendors/UserVendors">Vendors</a></li>
                        <li><i class="icon-angle-right"></i><a href="/Vendors/Add_Vendor">Add Vendor</a></li>
                    </ul>
                    <!-- END PAGE TITLE & BREADCRUMB-->
                </div>
            </div>

            <div class="row-fluid">
        <div class="span12"> 
          <!-- BEGIN SAMPLE FORM PORTLET-->
          <div class="portlet box blue border-topf">
            <div class="portlet-body form"> 
              <!-- BEGIN FORM-->
             <!-- <h3 class="page-title matop border-btoom">create Customer <a href="#"><i class="icon-plus-sign"></i></a></h3>-->
               @using (Html.BeginForm("Add_Vendor", "Vendors", FormMethod.Post, new { enctype = "multipart/form-data" }))
               { 
                    <h3 class="form-section matop">Vendor Details</h3>
                  <div class="row-fluid">
                  <div class="span6 ">
                    <div class="control-group">
                      <label for="firstName" class="control-label">Unique #</label>
                      <div class="controls">
                        <input type="text" class="m-wrap span12 border-form-radius" disabled="" placeholder="Auto Generated">
                      </div>
                    </div>
                  </div>

                       <div class="span6 ">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Company Name</label>
                          
                          @Html.TextBoxFor(model => model.CompanyName, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.CompanyName)
                      </div>
                    </div>
                  </div>


                      </div>
                   
                       <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">First Name</label>
                         @Html.TextBoxFor(model => model.VendorFirstName, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.VendorFirstName)
                      </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Last Name</label>
                         @Html.TextBoxFor(model => model.VendorLastName, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.VendorLastName)
                      </div>
                    </div>
                  </div>
                </div>
                   
                   <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Title</label>
                        @Html.TextBoxFor(model => model.Title, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.Title)
                      </div>
                    </div>
                  </div>
                </div>
                <h3 class="form-section matop">Communication Details</h3>
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Office Email</label>
                        @Html.TextBoxFor(model => model.Email, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.Email)
                      </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Business Phone</label>
                       @Html.TextBoxFor(model => model.Phone, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.Phone)
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Business FAX</label>
                        @Html.TextBoxFor(model => model.Fax, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.Fax)
                      </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                          <label class="control-label">Country</label>
                                            @Html.HiddenFor(model => model.CommCountryId, new { @id = "hdnCommCountryId" })
                    <input type="text" title="" class="m-wrap span12 border-form-radius" pattern="^[a-zA-Z''-'\s]{1,40}$" id="country" placeholder="Select Country" />
                          </div>
                    </div>
                  </div>
                </div>
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                           <label class="control-label">State</label>
                                            @Html.HiddenFor(model => model.CommStateId, new { @id = "hdnCommStateId" })
                    <input type="text" id="state" class="m-wrap span12 border-form-radius" placeholder="Select State" />
                   
                            </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                         <label class="control-label">City</label>
                                            @Html.HiddenFor(model => model.CommCityId, new { @id = "hdnCommCityId" })
                                            <input type="text" id="city" class="m-wrap span12 border-form-radius" placeholder="Select City" />
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                       <label class="control-label">Street</label>
                       @Html.TextBoxFor(model => model.CommStreet, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.CommStreet)
                      </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                       <label class="control-label">ZIP</label>
                        @Html.TextBoxFor(model => model.Zip, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.Zip)
                    </div>
                    </div>
                  </div>
                </div>
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Website</label>
                        @Html.TextBoxFor(model => model.Website, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.Website)
                      </div>
                    </div>
                  </div>
                  
                </div>
                <h3 class="form-section matop">Bank Details</h3>
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Bank name</label>
                        @Html.TextBoxFor(model => model.BankName, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.BankName)
                      </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Account #</label>
                        @Html.TextBoxFor(model => model.AccountNum, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.AccountNum)
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row-fluid">
                <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Account type</label>
                           @Html.DropDownListFor(model => model.BankAccountTypeId, (SelectList)ViewBag.AccountType, "--Select--", new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.BankAccountTypeId)
                      </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Routing #</label>
                        @Html.TextBoxFor(model => model.RountingNum, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.RountingNum)
                      </div>
                    </div>
                  </div>
                </div>
                   
                   <div class="row-fluid">
                
                  <div class="span12">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Bank Address</label>
                        @Html.TextBoxFor(model => model.BankAddress, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.BankAddress)
                      </div>
                    </div>
                  </div>
                  
                </div>
                  <h3 class="form-section matop">Payment Details</h3>
                
                <div class="row-fluid">
                <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Preferred Payment Method</label>
                            @Html.DropDownListFor(model => model.PaymentTypesId, (SelectList)ViewBag.PaymentType, "--Select--", new { @class = "m-wrap span12 border-form-radius" })
                      </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Credit Card Token ID</label>
                        @Html.TextBoxFor(model => model.CreditCardToken, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.CreditCardToken)
                      </div>
                    </div>
                  </div>
                  
                </div>
                   <h3 class="form-section matop">Billing Address</h3>   
                   <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                          <label class="control-label">Country</label>
                                            @Html.HiddenFor(model => model.BillingCountryId, new { @id = "hdnbillingCountryId" })
                    <input type="text" title="" class="m-wrap span12 border-form-radius" pattern="^[a-zA-Z''-'\s]{1,40}$" id="billingcountry" placeholder="Select Country" />
                   
                      </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">City</label>
                        @Html.TextBoxFor(model => model.BillingCityId, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.BillingCityId)
                      </div>
                    </div>
                  </div>
                </div>  
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                            <label class="control-label">Street</label>
                        @Html.TextBoxFor(model => model.BillingStreet, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.BillingStreet)
                     </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                      <label class="control-label">ZIP</label>
                        @Html.TextBoxFor(model => model.Billingzip, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.Billingzip)
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">State</label>
                        @Html.TextBoxFor(model => model.BillingStateId, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.BillingStateId)
                      </div>
                    </div>
                  </div>
                  
                </div>
                <h3 class="form-section matop">Shipping Address&nbsp;
					<div class="checker"><span>
                        <input type="checkbox" value="" class="checkbox"></span></div>
                                             <span class="checkbox-font">Same as Billing Address</span>
											</h3>   
                   <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                           
                          <label class="control-label">Country</label>
                          @Html.HiddenFor(model => model.ShippingCountryId)
                    <input type="text" title="" class="m-wrap span12 border-form-radius" pattern="^[a-zA-Z''-'\s]{1,40}$" id="shippingcountry" placeholder="Select Country" />
                   
                          </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                            <label class="control-label">State</label>
                        @Html.TextBoxFor(model => model.ShippingStateId, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.ShippingStateId)
                     
                          </div>
                    </div>
                  </div>
                </div>  
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">City</label>
                        @Html.TextBoxFor(model => model.ShippingCityId, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.ShippingCityId)
                    
                         </div>
                    </div>
                  </div>
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                       <label class="control-label">Street</label>
                        @Html.TextBoxFor(model => model.ShippingStreet, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.ShippingStreet)
                    </div>
                    </div>
                  </div>
                </div>
                
                <div class="row-fluid">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">ZIP</label>
                        @Html.TextBoxFor(model => model.ShippingZip, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.ShippingZip)
                      </div>
                    </div>
                  </div>
                  
                </div>
                
                <h3 class="form-section matop">Tax Details</h3>  
                <div class="row-fluid">
                  <div class="span3">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Federal Tax ID</label>
                        @Html.TextBoxFor(model => model.FederalTaxNum, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.FederalTaxNum)
                      </div>
                    </div>
                  </div>
                  <div class="span3">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Federal Tax %</label>
                                            @Html.TextBoxFor(model => model.FederalTaxValue, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.FederalTaxValue)
                      </div>
                    </div>
                  </div>
                  <div class="span3">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">City Tax ID</label>
                           @Html.TextBoxFor(model => model.CityTaxNum, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.CityTaxNum)
                      </div>
                    </div>
                  </div>
                  <div class="span3">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">City Tax %</label>
                           @Html.TextBoxFor(model => model.CityTaxValue, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.CityTaxValue)
                      </div>
                    </div>
                  </div>
                  
                </div>
                <div class="row-fluid">
                  <div class="span3">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">State Tax ID</label>
                           @Html.TextBoxFor(model => model.StateTaxNum, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.StateTaxNum)
                      </div>
                    </div>
                  </div>
                  <div class="span3">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">State Tax %</label>
                           @Html.TextBoxFor(model => model.StateTaxValue, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.StateTaxValue)
                      </div>
                    </div>
                  </div>
                  <div class="span3">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Country Tax ID</label>
                           @Html.TextBoxFor(model => model.CountyTaxNum, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.CountyTaxNum)
                      </div>
                    </div>
                  </div>
                  <div class="span3">
                    <div class="control-group">
                      <div class="controls">
                        <label class="control-label">Country Tax %</label>
                           @Html.TextBoxFor(model => model.CountyTaxValue, new { @class = "m-wrap span12 border-form-radius" })
                                            @Html.ValidationMessageFor(model => model.CountyTaxValue)
                      </div>
                    </div>
                  </div>
                   <div class="span12 no-left-margin">
                  <div class="control-group">
																		<div class="controls">
											<label class="radio">
                                                <div class="radio"><span>
                                                    <input type="radio" name="optionsRadios1" value="option1"></span></div>
											Taxable 
											</label>
											<label class="radio">
                                                <div class="radio">
                                                    <span class="checked">
                                                        <input type="radio" name="optionsRadios1" value="option2" checked=""></span>
                                                </div>
											Non Taxable 
											</label>  
											  
										</div>
									</div>
                                    </div>
                  
                </div>
                 <h3 class="form-section matop">Documents</h3>  
                <div class="row-fluid margin-bottom-10">
                  <div class="span6">
                    <div class="control-group">
                      <div class="controls">
                        <div class="fileupload fileupload-new" data-provides="fileupload">
                          <div class="input-append">
                                                    <div class="uneditable-input"><i class="icon-file fileupload-exists"></i><span class="fileupload-preview"></span></div>
                                                    <span class="btn btn-file"><span class="fileupload-new">Upload</span> <span class="fileupload-exists">Change</span>
                            <input type="file" class="default">
                                                    </span>
                                                </div>
                        </div>
                      </div>
                                        </div>
                        <table width="100%" border="0" cellspacing="0" cellpadding="0">
                                            <tbody>
                                                <tr>
                              <td width="85%" valign="middle"><a href="./Create Vendor_files/Create Vendor.htm">one.pdf</a></td>
                              <td width="15%" align="center"><i class="icon-remove-circle f24"></i></td>
                            </tr>
                            <tr>
                              <td width="85%" valign="middle"><a href="./Create Vendor_files/Create Vendor.htm">excel.xls</a></td>
                              <td width="15%" align="center"><i class="icon-remove-circle f24"></i></td>
                            </tr>
                                            </tbody>
                                        </table>
                    </div>
                  </div>
                </div>
                
                <div class="form-actions">
                                <button class="btn blue" type="submit"><i class="icon-plus-sign"></i>Add</button>
                  <button class="btn" type="button">Cancel</button>
                </div>
               }
            </div>
    </div>
            </div>
        </div>
    </div>
@*    </div>
        </div>
    </div>
</div>*@

<script type="text/javascript">
    var url = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';
    $('#country').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: url,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.CountryName,
                            value: item.CountryId
                        };
                    }));
                }
            });
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#country').val(ui.item.label);
            $('#hdnCommCountryId').val(ui.item.value);
            alert($('#hdnCommCountryId').val());
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });


    var stateapi = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';

    $('#state').autocomplete({
        source: function (request, response) {
            //debugger;
            var countryId = $('#hdnCommCountryId').val();
            //debugger;
            if (countryId > 0) {
                $.ajax({
                    url: stateapi,
                    data: { country: countryId, query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.StateName,
                                value: item.StateId
                            };
                        }));
                    }
                });
            }
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#state').val(ui.item.label);
            $('#hdnCommStateId').val(ui.item.value);
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });


    var stateapi = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';
    //debugger;
    $('#city').autocomplete({
        source: function (request, response) {

            var stateId = $('#hdnCommStateId').val();
            //debugger;
            if (stateId > 0) {
                $.ajax({
                    url: stateapi,
                    data: { state: stateId, query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.CityName,
                                value: item.CityId
                            };
                        }));
                    }
                });
            }
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#city').val(ui.item.label);
            $('#hdnCommCityId').val(ui.item.value);
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });



    var url = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';
    $('#billingcountry').autocomplete({
        source: function (request, response) {
  
            $('#state').autocomplete({
                source: function (request, response) {
                    //debugger;
                    var countryId = $('#BusinessRegInfo_CountryId').val();
                    //debugger;
                    if (countryId > 0) {
                        $.ajax({
                            url: url,
                            data: { query: request.term },
                            dataType: 'json',
                            type: 'GET',
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return {
                                        label: item.CountryName,
                                        value: item.CountryId
                                    };
                                }));
                            }
                        });
                    },
                    focus: function (event, ui) {
                        this.value = ui.item.label;
                        $(".ui-helper-hidden-accessible").css("display", "none");
                        event.preventDefault(); // Prevent the default focus behavior.
                    },
                    select: function (event, ui) {
                        $('#billingcountry').val(ui.item.label);
                        $('#BusinessRegInfo_CountryId').val(ui.item.value);

                        return false;
                    },
                    minLength: 1,
                    messages: {
                        noResults: '',
                        results: function () { }
                    }
                });


            var url = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';
    $('#shippingcountry').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: url,
                data: { query: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.CountryName,
                            value: item.CountryId
                        };
                    }));
                }
            });
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#shippingcountry').val(ui.item.label);
            $('#BusinessRegInfo_CountryId').val(ui.item.value);

            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });




    var stateapi = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';
            //debugger;
    $('#billingstate').autocomplete({
        source: function (request, response) {

            var countryId = $('#BusinessRegInfo_CountryId').val();
            //debugger;
            if (countryId > 0) {
                $.ajax({
                    url: stateapi,
                    data: { country: countryId, query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.StateName,
                                value: item.StateId
                            };
                        }));
                    }
                });
            }
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#billingstate').val(ui.item.label);
            $('#BusinessRegInfo_StateId').val(ui.item.value);
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });

    var stateapi = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';
            //debugger;
    $('#shippingstate').autocomplete({
        source: function (request, response) {

            var countryId = $('#BusinessRegInfo_CountryId').val();
            //debugger;
            if (countryId > 0) {
                $.ajax({
                    url: stateapi,
                    data: { country: countryId, query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.StateName,
                                value: item.StateId
                            };
                        }));
                    }
                });
            }
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#shippingstate').val(ui.item.label);
            $('#BusinessRegInfo_StateId').val(ui.item.value);
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });



    var stateapi = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';
            //debugger;
    $('#billingcity').autocomplete({
        source: function (request, response) {

            var stateId = $('#BusinessRegInfo_StateId').val();
            //debugger;
            if (stateId > 0) {
                $.ajax({
                    url: stateapi,
                    data: { state: stateId, query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.CityName,
                                value: item.CityId
                            };
                        }));
                    }
                });
            }
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#billingcity').val(ui.item.label);
            $('#BusinessRegInfo_CityId').val(ui.item.value);
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });


    var stateapi = '@Url.RouteUrl("DefaultApi",
        new { httproute = "", controller = "CountriesApi" })';
            //debugger;
    $('#shippingcity').autocomplete({
        source: function (request, response) {

            var stateId = $('#BusinessRegInfo_StateId').val();
            //debugger;
            if (stateId > 0) {
                $.ajax({
                    url: stateapi,
                    data: { state: stateId, query: request.term },
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.CityName,
                                value: item.CityId
                            };
                        }));
                    }
                });
            }
        },
        focus: function (event, ui) {
            this.value = ui.item.label;
            $(".ui-helper-hidden-accessible").css("display", "none");
            event.preventDefault(); // Prevent the default focus behavior.
        },
        select: function (event, ui) {
            $('#shippingcity').val(ui.item.label);
            $('#BusinessRegInfo_CityId').val(ui.item.value);
            return false;
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () { }
        }
    });

    $(document).ready(
        function () {
            $("#btnUserInfo").click(

                function () {
                    //debugger;
                    $("#form").validate();
                    if ($("#form").valid()) {
                        $("#userInfo")[0].style.display = 'none';
                        $("#businessInfo")[0].style.display = 'block';
                    }
                }
                );
            $("#btnBusinessInfo").click(
                function () {
                    //debugger;
                    $("#form").validate();
                    if ($("#form").valid()) {
                        $("#businessInfo")[0].style.display = 'none';
                        $("#process")[0].style.display = "block";
                    }
                }
                );

            $("#btnPrcBack").click(
                function () {
                    $("#businessInfo")[0].style.display = 'block';
                    $("#process")[0].style.display = "none";
                }
                );

            $("#btnBusInfoBack").click(
                function () {
                    $("#userInfo")[0].style.display = 'block';
                    $("#businessInfo")[0].style.display = 'none';
                }
                );
        }
        );
</script>
    @Scripts.Render("~/bundle/Script/Dashboard")